<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how several images can be combined</c>
<c>* into a large mosaic image. The program shows how to use</c>
<c>* proj_match_points_ransac and gen_projective_mosaic to achieve this.</c>
<c>* Especially, the effect of the elimination of the radial distortions and</c>
<c>* of different definitions of the overlapping image pairs are shown.</c>
<c>* </c>
<c>* Set some control parameters:</c>
<c>* Define if the radial distortions will be eliminated (true or false).</c>
<l>EliminateRadialDistortions := true</l>
<c>* Define the configuration of the image pairs, i.e., which image will be</c>
<c>* mapped to which image (1, 2, or 3; see below and</c>
<c>* Solution Guide III-C 3D Vision, 10.2 Definition of Overlapping Image Pairs)</c>
<l>PairConfiguration := 2</l>
<c>* Define whether a rigid transformation shall be used instead of</c>
<c>* the projective transformation (true or false).</c>
<l>UseRigidTransformation := true</l>
<c>* </c>
<c>* Set image path and name</c>
<l>ImgPath := '3d_machine_vision/mosaic/'</l>
<l>ImgName := 'bga_r_'</l>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 640, 480, 'black', WindowHandle1)</l>
<l>dev_set_color ('green')</l>
<l>set_display_font (WindowHandle1, 16, 'mono', 'true', 'false')</l>
<c>* The internal camera parameters of the used camera</c>
<c>* (only necessary if the radial distortions are to be eliminated).</c>
<l>gen_cam_par_area_scan_division (0.0121693, -2675.63, 7.40046e-006, 7.4e-006, 290.491, 258.887, 640, 480, CamParam)</l>
<l>change_radial_distortion_cam_par ('adaptive', CamParam, 0, CamParOut)</l>
<c>* Read the images and show them one by one.</c>
<l>gen_empty_obj (Images)</l>
<l>for J := 1 to 10 by 1</l>
<l>    read_image (Image, ImgPath + ImgName + J$'02')</l>
<l>    if (EliminateRadialDistortions)</l>
<l>        change_radial_distortion_image (Image, Image, Image, CamParam, CamParOut)</l>
<l>    endif</l>
<l>    concat_obj (Images, Image, Images)</l>
<l>    dev_display (Image)</l>
<l>    disp_message (WindowHandle1, 'Image ' + J$'d', 'window', 12, 12, 'black', 'true')</l>
<l>    wait_seconds (0.5)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* To show the point matches that are used to compute the projective</c>
<c>* transformation between the images, we will show all images in a large</c>
<c>* tiled image with some space between the images so that the extents</c>
<c>* of the images are easily visible.</c>
<l>get_image_size (Image, Width, Height)</l>
<l>TileSpacingRow := 20</l>
<l>TileSpacingColumn := 20</l>
<l>TiledWidth := 5 * Width + 4 * TileSpacingColumn</l>
<l>TiledHeight := 2 * Height + TileSpacingRow</l>
<l>dev_set_window_extents (-1, -1, TiledWidth / 4, TiledHeight / 4)</l>
<l>OffsetRow := Height + TileSpacingRow</l>
<l>OffsetColumn := Width + TileSpacingColumn</l>
<l>tile_images_offset (Images, TiledImage, [0,0,0,0,0,OffsetRow,OffsetRow,OffsetRow,OffsetRow,OffsetRow], [0 * OffsetColumn,1 * OffsetColumn,2 * OffsetColumn,3 * OffsetColumn,4 * OffsetColumn,0 * OffsetColumn,1 * OffsetColumn,2 * OffsetColumn,3 * OffsetColumn,4 * OffsetColumn], [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], TiledWidth, TiledHeight)</l>
<l>dev_clear_window ()</l>
<l>dev_display (TiledImage)</l>
<l>disp_message (WindowHandle1, 'All 10 images', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* Now we compute point matches between pairs of images. With this,</c>
<c>* we then compute the projective transformation between the image pairs.</c>
<l>dev_clear_window ()</l>
<l>dev_display (TiledImage)</l>
<l>if (PairConfiguration == 1)</l>
<l>    From := [1,2,3,4,6,7,8,9,1]</l>
<l>    To := [2,3,4,5,7,8,9,10,6]</l>
<l>elseif (PairConfiguration == 2)</l>
<l>    From := [1,2,3,4,6,7,8,9,3]</l>
<l>    To := [2,3,4,5,7,8,9,10,8]</l>
<l>elseif (PairConfiguration == 3)</l>
<l>    From := [1,2,3,4,1,2,3,4,5]</l>
<l>    To := [2,3,4,5,6,7,8,9,10]</l>
<l>else</l>
<c>    * Set default pair configuration.</c>
<l>    From := [1,2,3,4,6,7,8,9,3]</l>
<l>    To := [2,3,4,5,7,8,9,10,8]</l>
<l>endif</l>
<l>Num := |From|</l>
<l>ImagePosRow := [0,0,0,0,0,1,1,1,1,1]</l>
<l>ImagePosColumn := [0,1,2,3,4,0,1,2,3,4]</l>
<c>* We need a variable to accumulate the projective transformation matrices.</c>
<l>ProjMatrices := []</l>
<c>* Now we can determine the transformations between the image pairs.</c>
<l>for J := 0 to Num - 1 by 1</l>
<l>    F := From[J]</l>
<l>    T := To[J]</l>
<l>    select_obj (Images, ImageFrom, F)</l>
<l>    select_obj (Images, ImageTo, T)</l>
<c>    * Extract points of interest in both images.</c>
<l>    SigmaGrad := 1</l>
<l>    SigmaSmooth := 3</l>
<l>    Alpha := 0.04</l>
<l>    Threshold := 0</l>
<l>    points_harris (ImageFrom, SigmaGrad, SigmaSmooth, Alpha, Threshold, RowFromAll, ColumnFromAll)</l>
<l>    points_harris (ImageTo, SigmaGrad, SigmaSmooth, Alpha, Threshold, RowToAll, ColumnToAll)</l>
<c>    * Determine the position of the from and to images in the set of overlapping images.</c>
<l>    FromImagePosRow := ImagePosRow[F - 1]</l>
<l>    FromImagePosColumn := ImagePosColumn[F - 1]</l>
<l>    ToImagePosRow := ImagePosRow[T - 1]</l>
<l>    ToImagePosColumn := ImagePosColumn[T - 1]</l>
<c>    * Define initial values for the position of the search window by defining the approximate position</c>
<c>    * of the corresponding ImageFrom and ImageTo.</c>
<l>    FromShiftRow := FromImagePosRow * Height</l>
<l>    FromShiftColumn := FromImagePosColumn * Width</l>
<l>    ToShiftRow := ToImagePosRow * Height</l>
<l>    ToShiftColumn := ToImagePosColumn * Width</l>
<c>    * Perform the matching.</c>
<l>    MaskSize := 21</l>
<l>    OverlapRow := 0.65</l>
<l>    OverlapColumn := 0.5</l>
<l>    RowMove := (FromShiftRow - ToShiftRow) * (1 - OverlapRow)</l>
<l>    ColumnMove := (FromShiftColumn - ToShiftColumn) * (1 - OverlapColumn)</l>
<l>    RowTolerance := 20</l>
<l>    ColumnTolerance := 20</l>
<l>    Rotation := 0</l>
<l>    MatchThreshold := 50</l>
<l>    DistanceThreshold := 0.4</l>
<l>    RandSeed := 0</l>
<l>    proj_match_points_ransac (ImageFrom, ImageTo, RowFromAll, ColumnFromAll, RowToAll, ColumnToAll, 'sad', MaskSize, RowMove, ColumnMove, RowTolerance, ColumnTolerance, Rotation, MatchThreshold, 'gold_standard', DistanceThreshold, RandSeed, ProjMatrix, Points1, Points2)</l>
<l>    if (UseRigidTransformation)</l>
<c>        * Select the coordinates at the indexes specified by Points1 and Points2.</c>
<l>        RowFrom := subset(RowFromAll,Points1)</l>
<l>        ColumnFrom := subset(ColumnFromAll,Points1)</l>
<l>        RowTo := subset(RowToAll,Points2)</l>
<l>        ColumnTo := subset(ColumnToAll,Points2)</l>
<c>        * Determine the rigid transformation.</c>
<l>        vector_to_rigid (RowFrom + 0.5, ColumnFrom + 0.5, RowTo + 0.5, ColumnTo + 0.5, HomMat2D)</l>
<l>        ProjMatrix := [HomMat2D,0,0,1]</l>
<l>    endif</l>
<c>    * Accumulate the transformation matrices.</c>
<l>    ProjMatrices := [ProjMatrices,ProjMatrix]</l>
<c>    * Define shifts for visualization of the points in the tiled image</c>
<l>    FromVisShiftRow := FromImagePosRow * TileSpacingRow</l>
<l>    FromVisShiftColumn := FromImagePosColumn * TileSpacingColumn</l>
<l>    ToVisShiftRow := ToImagePosRow * TileSpacingRow</l>
<l>    ToVisShiftColumn := ToImagePosColumn * TileSpacingColumn</l>
<c>    * Generate crosses that represent the extracted points in the tiled image.</c>
<c>    * Note that we have to take the row offsets of the images in the tiled image</c>
<c>    * into account.</c>
<l>    gen_cross_contour_xld (PointsFrom, RowFromAll + FromShiftRow + FromVisShiftRow, ColumnFromAll + FromShiftColumn + FromVisShiftColumn, 6, rad(45))</l>
<l>    gen_cross_contour_xld (PointsTo, RowToAll + ToShiftRow + ToVisShiftRow, ColumnToAll + ToShiftColumn + ToVisShiftColumn, 6, rad(45))</l>
<c>    * Generate a representation of the matched point pairs as lines.  We create</c>
<c>    * XLD contours from the lines so that we can zoom into the raphics window</c>
<c>    * to take a closer look at the matches.</c>
<l>    RowFrom := subset(RowFromAll,Points1) + FromShiftRow + FromVisShiftRow</l>
<l>    ColumnFrom := subset(ColumnFromAll,Points1) + FromShiftColumn + FromVisShiftColumn</l>
<l>    RowTo := subset(RowToAll,Points2) + ToShiftRow + ToVisShiftRow</l>
<l>    ColumnTo := subset(ColumnToAll,Points2) + ToShiftColumn + ToVisShiftColumn</l>
<l>    gen_empty_obj (Matches)</l>
<l>    for K := 0 to |RowFrom| - 1 by 1</l>
<l>        gen_contour_polygon_xld (Match, [RowFrom[K],RowTo[K]], [ColumnFrom[K],ColumnTo[K]])</l>
<l>        concat_obj (Matches, Match, Matches)</l>
<l>    endfor</l>
<c>    * Now display the extracted data.</c>
<l>    dev_set_colored (12)</l>
<l>    dev_display (Matches)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (PointsFrom)</l>
<l>    dev_display (PointsTo)</l>
<l>endfor</l>
<l>disp_message (WindowHandle1, 'Point matches', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* Finally, we can generate the mosaic image from the projective transformations.</c>
<l>StartImage := 3</l>
<l>StackingOrder := [6,10,7,9,8,1,5,2,4,3]</l>
<l>gen_projective_mosaic (Images, MosaicImage, StartImage, From, To, ProjMatrices, StackingOrder, 'false', MosaicMatrices2D)</l>
<l>get_image_size (MosaicImage, Width, Height)</l>
<l>dev_set_window_extents (-1, -1, Width / 2, Height / 2)</l>
<l>dev_clear_window ()</l>
<l>dev_display (MosaicImage)</l>
<l>disp_message (WindowHandle1, 'Projective mosaic', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* To investigate the seam between two images, we first display the borders</c>
<c>* of the individual images.</c>
<c>* This can be done most easily by creating an image that contains the border</c>
<c>* of the images, generating a mosaic from it, and segmenting the resulting</c>
<c>* mosaic image.</c>
<l>visualize_seams (Image, MosaicImage, StartImage, From, To, ProjMatrices, StackingOrder)</l>
<c>* Now, open a zoom window, showing the area around</c>
<c>* the seam between image five and image ten.</c>
<l>visualize_zoomed_seam (MosaicImage, WindowHandle1, WindowHandle2)</l>
<l>stop ()</l>
<l>disp_end_of_program_message (WindowHandle1, 'black', 'true')</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="visualize_zoomed_seam">
<interface>
<io>
<par name="MosaicImage" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="WindowHandle2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_image_size (MosaicImage, Width, Height)</l>
<l>PartHeight := 64</l>
<l>PartWidth := 256</l>
<l>PartCenterRow := 490</l>
<l>PartCenterCol := 1800</l>
<l>dev_open_window (Height / 2 + 70, 0, PartWidth * 2, PartHeight * 2, 'black', WindowHandle2)</l>
<l>dev_set_part (PartCenterRow - PartHeight / 2 + 1, PartCenterCol - PartWidth / 2 + 1, PartCenterRow + PartHeight / 2, PartCenterCol + PartWidth / 2)</l>
<l>dev_display (MosaicImage)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('orange red')</l>
<l>dev_set_line_width (6)</l>
<l>disp_rectangle1 (WindowHandle2, PartCenterRow - PartHeight / 2 + 1, PartCenterCol - PartWidth / 2 + 1, PartCenterRow + PartHeight / 2, PartCenterCol + PartWidth / 2)</l>
<l>dev_set_window (WindowHandle1)</l>
<l>get_image_size (MosaicImage, Width, Height)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('orange red')</l>
<l>dev_set_line_width (3)</l>
<l>disp_rectangle1 (WindowHandle1, PartCenterRow - PartHeight / 2 + 1, PartCenterCol - PartWidth / 2 + 1, PartCenterRow + PartHeight / 2, PartCenterCol + PartWidth / 2)</l>
<l>disp_message (WindowHandle1, 'Seams between the images', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>return ()</l>
</body>
<docu id="visualize_zoomed_seam">
<parameters>
<parameter id="MosaicImage"/>
<parameter id="WindowHandle1"/>
<parameter id="WindowHandle2"/>
</parameters>
</docu>
</procedure>
<procedure name="visualize_seams">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="MosaicImage" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="StartImage" base_type="ctrl" dimension="0"/>
<par name="From" base_type="ctrl" dimension="0"/>
<par name="To" base_type="ctrl" dimension="0"/>
<par name="ProjMatrices" base_type="ctrl" dimension="0"/>
<par name="StackingOrder" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_image_size (Image, Width, Height)</l>
<l>gen_image_const (ImageBlank, 'byte', Width, Height)</l>
<l>gen_rectangle1 (Rectangle, 0, 0, Height - 1, Width - 1)</l>
<l>paint_region (Rectangle, ImageBlank, ImageBorder, 255, 'margin')</l>
<l>gen_empty_obj (ImagesBorder)</l>
<l>for J := 1 to 10 by 1</l>
<l>    concat_obj (ImagesBorder, ImageBorder, ImagesBorder)</l>
<l>endfor</l>
<l>gen_projective_mosaic (ImagesBorder, MosaicImageBorder, StartImage, From, To, ProjMatrices, StackingOrder, 'false', MosaicMatrices2D)</l>
<l>threshold (MosaicImageBorder, Seams, 128, 255)</l>
<l>dev_clear_window ()</l>
<l>dev_display (MosaicImage)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Seams)</l>
<l>return ()</l>
</body>
<docu id="visualize_seams">
<parameters>
<parameter id="From"/>
<parameter id="Image"/>
<parameter id="MosaicImage"/>
<parameter id="ProjMatrices"/>
<parameter id="StackingOrder"/>
<parameter id="StartImage"/>
<parameter id="To"/>
</parameters>
</docu>
</procedure>
</hdevelop>
