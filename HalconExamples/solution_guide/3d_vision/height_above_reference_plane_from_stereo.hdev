<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program demonstrates how to derive</c>
<c>* height information from binocular stereo.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>ImagePath := '3d_machine_vision/stereo/'</l>
<l>ImageFiles := ['board_aligned_l','board_aligned_r','board_rotated_l','board_rotated_r']</l>
<c>* </c>
<c>* Set camera parameters and the relative pose of</c>
<c>* the second camera in relation to the first camera.</c>
<l>gen_cam_par_area_scan_division (0.0131207, -622.291, 7.40051e-006, 7.4e-006, 313.212, 257.118, 640, 480, CamParamL)</l>
<l>gen_cam_par_area_scan_division (0.0131949, -622.579, 7.41561e-006, 7.4e-006, 319.161, 229.867, 640, 480, CamParamR)</l>
<l>create_pose (0.153128, -0.00389049, 0.0453321, 0.640628, 319.764, 0.141582, 'Rp+T', 'gba', 'point', RelPose)</l>
<c>* </c>
<c>* Generate rectification maps that are needed for</c>
<c>* the rectification of the stereo images</c>
<l>gen_binocular_rectification_map (MapL, MapR, CamParamL, CamParamR, RelPose, 1, 'viewing_direction', 'bilinear', RectCamParL, RectCamParR, CamPoseRectL, CamPoseRectR, RectLPosRectR)</l>
<c>* </c>
<c>* Open the windows in an appropriate size</c>
<l>get_image_size (MapR, WidthR, HeightR)</l>
<l>get_image_size (MapL, WidthL, HeightL)</l>
<l>dev_open_window (0, 0, WidthL / 1.5, HeightL / 1.5, 'black', WindowHandle1)</l>
<l>dev_open_window (0, WidthL / 1.5 + 10, WidthR / 1.5, HeightR / 1.5, 'black', WindowHandle2)</l>
<l>set_display_font (WindowHandle1, 16, 'mono', 'true', 'false')</l>
<l>set_display_font (WindowHandle2, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Display short description</c>
<l>Message := 'This program demonstrates how to'</l>
<l>Message[1] := 'derive height information from'</l>
<l>Message[2] := 'binocular stereo.'</l>
<l>disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Loop over two test images</c>
<l>for I := 0 to 2 by 2</l>
<c>    * </c>
<c>    * Get the left image of the stereo image pair,</c>
<c>    * enhance the contrast and rectify the image</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_part (0, 0, HeightL - 1, WidthL - 1)</l>
<l>    read_image (ImageL, ImagePath + ImageFiles[I])</l>
<l>    emphasize (ImageL, ImageL, 7, 7, 1)</l>
<l>    map_image (ImageL, MapL, ImageRectifiedL)</l>
<c>    * </c>
<c>    * Get the right image of the stereo image pair,</c>
<c>    * enhance the contrast and rectify the image</c>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_part (0, 0, HeightR - 1, WidthR - 1)</l>
<l>    read_image (ImageR, ImagePath + ImageFiles[I + 1])</l>
<l>    emphasize (ImageR, ImageR, 7, 7, 1)</l>
<l>    map_image (ImageR, MapR, ImageRectifiedR)</l>
<c>    * </c>
<c>    * Display both images before rectification</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_display (ImageL)</l>
<l>    disp_message (WindowHandle1, 'Left image', 'window', 12, 12, 'black', 'true')</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_display (ImageR)</l>
<l>    disp_message (WindowHandle2, 'Right image', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Display both images after rectification</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_display (ImageRectifiedL)</l>
<l>    disp_message (WindowHandle1, 'Left image: rectified', 'window', 12, 12, 'black', 'true')</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_display (ImageRectifiedR)</l>
<l>    disp_message (WindowHandle2, 'Right image: rectified', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * Define parameter values for binocular_disparity and binocular_distance, respectively.</c>
<l>    MaskWidth := 21</l>
<l>    MaskHeight := 21</l>
<l>    TextureThresh := 5</l>
<l>    MinDisparity := 35</l>
<l>    MaxDisparity := 75</l>
<l>    NumLevels := 1</l>
<l>    ScoreThresh := 0.1</l>
<c>    * </c>
<c>    * Determine the distance image and the matching score</c>
<l>    binocular_distance (ImageRectifiedL, ImageRectifiedR, DistanceImage, ScoreImageDistance, RectCamParL, RectCamParR, RectLPosRectR, 'ncc', MaskWidth, MaskHeight, TextureThresh, MinDisparity, MaxDisparity, NumLevels, ScoreThresh, 'left_right_check', 'interpolation')</l>
<c>    * Alternatively, determine the disparity image</c>
<c>    * (Note, that in this example, the disparity image is not used and only</c>
<c>    * calculated to show the use of the operator binocular_disparity)</c>
<l>    binocular_disparity (ImageRectifiedL, ImageRectifiedR, DisparityImage, ScoreImageDisparity, 'ncc', MaskWidth, MaskHeight, TextureThresh, MinDisparity, MaxDisparity, NumLevels, ScoreThresh, 'left_right_check', 'interpolation')</l>
<c>    * </c>
<c>    * Display the distance image and the matching score image</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_display (DistanceImage)</l>
<l>    disp_message (WindowHandle1, 'Distance image', 'window', 12, 12, 'black', 'true')</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_display (ScoreImageDistance)</l>
<l>    disp_message (WindowHandle2, 'Matching score image', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Correct the distance image for the tilt of the stereo camera system</c>
<c>    * First, define a region, which indicates three areas on the reference plane</c>
<l>    if (I == 0)</l>
<l>        dev_set_color ('green')</l>
<l>        gen_circle (Circle, [65,145,455], [50,590,210], [15,15,15])</l>
<l>        union1 (Circle, RegionDefiningReferencePlane)</l>
<l>        dev_set_color ('red')</l>
<l>    else</l>
<l>        dev_set_color ('green')</l>
<l>        gen_circle (Circle, [60,260,420], [40,590,90], [15,15,15])</l>
<l>        union1 (Circle, RegionDefiningReferencePlane)</l>
<l>        dev_set_color ('red')</l>
<l>    endif</l>
<c>    * Eliminate the effect of the tilt</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    tilt_correction (DistanceImage, RegionDefiningReferencePlane, DistanceImageCorrected)</l>
<c>    * </c>
<c>    * Transform the distances into heights above the reference plane</c>
<c>    * and visualize the different height ranges</c>
<l>    MinHeight := -0.0005</l>
<l>    MaxHeight := 0.05</l>
<l>    height_range_above_reference_plane (DistanceImageCorrected, HeightAboveReferencePlaneReduced, MinHeight, MaxHeight)</l>
<l>    dev_display (HeightAboveReferencePlaneReduced)</l>
<l>    visualize_height_ranges (ImageRectifiedL, HeightAboveReferencePlaneReduced, WindowHandle2, 0.0004, 0.0015, 0.0015, 0.0025, 0.0025, 0.004)</l>
<c>    * </c>
<c>    * Write some informations to the windows</c>
<l>    disp_message (WindowHandle1, 'Distance image\nInverted and tilt-corrected', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle2, 'Height segmentation', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>    if (I == 0)</l>
<l>        dev_set_window (WindowHandle1)</l>
<l>        dev_set_color ('red')</l>
<l>        dev_set_part (0, 0, HeightR - 1, WidthR - 1)</l>
<l>        dev_display (ImageRectifiedR)</l>
<c>        * Display some information</c>
<l>        Message := 'Repetitive patterns that are'</l>
<l>        Message[1] := 'aligned with rows of the rectified'</l>
<l>        Message[2] := 'image may disturb the matching.'</l>
<l>        disp_message (WindowHandle1, Message, 'window', 5, 5, 'black', 'true')</l>
<l>        dev_set_draw ('margin')</l>
<l>        gen_rectangle1 (AreaOfRepetitivePatterns, [142,375,172,405], [115,115,460,460], [172,405,202,435], [330,330,680,680])</l>
<l>        dev_display (AreaOfRepetitivePatterns)</l>
<l>        dev_set_draw ('fill')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="tilt_correction">
<interface>
<io>
<par name="DistanceImage" base_type="iconic" dimension="0"/>
<par name="RegionDefiningReferencePlane" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DistanceImageCorrected" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c>* Reduce the given region, which defines the reference plane</c>
<c>* to the domain of the distance image</c>
<l>get_domain (DistanceImage, Domain)</l>
<l>intersection (RegionDefiningReferencePlane, Domain, RegionDefiningReferencePlane)</l>
<c>* Determine the parameters of the reference plane</c>
<l>moments_gray_plane (RegionDefiningReferencePlane, DistanceImage, MRow, MCol, Alpha, Beta, Mean)</l>
<c>* Generate a distance image of the reference plane</c>
<l>get_image_pointer1 (DistanceImage, Pointer, Type, Width, Height)</l>
<l>area_center (RegionDefiningReferencePlane, Area, Row, Column)</l>
<l>gen_image_surface_first_order (ReferencePlaneDistance, Type, Alpha, Beta, Mean, Row, Column, Width, Height)</l>
<c>* Subtract the distance image of the reference plane</c>
<c>* from the distance image of the object</c>
<l>sub_image (DistanceImage, ReferencePlaneDistance, DistanceImageWithoutTilt, 1, 0)</l>
<c>* Determine the scale factor for the reduction of the distance values</c>
<l>CosGamma := 1.0 / sqrt(Alpha * Alpha + Beta * Beta + 1)</l>
<c>* Reduce the distance values</c>
<l>scale_image (DistanceImageWithoutTilt, DistanceImageCorrected, CosGamma, 0)</l>
<l>return ()</l>
</body>
<docu id="tilt_correction">
<short lang="en_US">Correction of a distance image according to a tilt of a reference object plane with respect to the rectified image plane.</short>
<parameters>
<parameter id="DistanceImage"/>
<parameter id="DistanceImageCorrected"/>
<parameter id="RegionDefiningReferencePlane"/>
</parameters>
</docu>
</procedure>
<procedure name="height_range_above_reference_plane">
<interface>
<io>
<par name="DistanceImageCorrected" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="HeightAboveReferencePlaneReduced" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="MinHeight" base_type="ctrl" dimension="0"/>
<par name="MaxHeight" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure may be useful if the reference plane is the ground plane</c>
<c>* of the object. Then, the inverted corrected distance values</c>
<c>* correspond to heights above the ground plane.</c>
<l>invert_image (DistanceImageCorrected, HeightAboveReferencePlane)</l>
<c>* Reduce the domain of the height image to a given height range.</c>
<l>threshold (HeightAboveReferencePlane, Region, MinHeight, MaxHeight)</l>
<l>reduce_domain (HeightAboveReferencePlane, Region, HeightAboveReferencePlaneReduced)</l>
<l>return ()</l>
</body>
<docu id="height_range_above_reference_plane">
<short lang="en_US">Inverts the tilt-corrected distance image and reduces its domain to a given height range.</short>
<parameters>
<parameter id="DistanceImageCorrected"/>
<parameter id="HeightAboveReferencePlaneReduced"/>
<parameter id="MaxHeight"/>
<parameter id="MinHeight"/>
</parameters>
</docu>
</procedure>
<procedure name="visualize_height_ranges">
<interface>
<io>
<par name="ImageMapped1" base_type="iconic" dimension="0"/>
<par name="HeightAboveReferencePlaneReduced" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle1" base_type="ctrl" dimension="0"/>
<par name="Height1_Min" base_type="ctrl" dimension="0"/>
<par name="Height1_Max" base_type="ctrl" dimension="0"/>
<par name="Height2_Min" base_type="ctrl" dimension="0"/>
<par name="Height2_Max" base_type="ctrl" dimension="0"/>
<par name="Height3_Min" base_type="ctrl" dimension="0"/>
<par name="Height3_Max" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageMapped1)</l>
<l>dev_set_color ('blue')</l>
<l>threshold (HeightAboveReferencePlaneReduced, Range1, Height1_Min, Height1_Max)</l>
<l>dev_display (Range1)</l>
<l>dev_set_color ('green')</l>
<l>threshold (HeightAboveReferencePlaneReduced, Range2, Height2_Min, Height2_Max)</l>
<l>dev_display (Range2)</l>
<l>dev_set_color ('red')</l>
<l>threshold (HeightAboveReferencePlaneReduced, Range3, Height3_Min, Height3_Max)</l>
<l>dev_display (Range3)</l>
<l>return ()</l>
</body>
<docu id="visualize_height_ranges">
<short lang="en_US">Visualizes three different height ranges, specified by the respectiv parameter values</short>
<parameters>
<parameter id="Height1_Max"/>
<parameter id="Height1_Min"/>
<parameter id="Height2_Max"/>
<parameter id="Height2_Min"/>
<parameter id="Height3_Max"/>
<parameter id="Height3_Min"/>
<parameter id="HeightAboveReferencePlaneReduced"/>
<parameter id="ImageMapped1"/>
<parameter id="WindowHandle1"/>
</parameters>
</docu>
</procedure>
</hdevelop>
