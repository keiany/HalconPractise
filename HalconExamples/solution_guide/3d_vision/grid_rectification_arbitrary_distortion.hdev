<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how the grid rectification</c>
<c>* can be used to generate arbitrary distortion maps based on</c>
<c>* self-defined grids.</c>
<c>* </c>
<c>* The example application is a print inspection.</c>
<c>* It is assumed that only distortions in the vertical direction</c>
<c>* of the printed document are present, which could,</c>
<c>* e.g., be caused by an inaccurate paper transport.</c>
<c>* These distortions are determined and applied</c>
<c>* to the reference image. Then the test image is compared</c>
<c>* with the distorted reference image.</c>
<c>* </c>
<c>* The example program uses component-based matching for the</c>
<c>* determination of the corresponding points in the test and</c>
<c>* the reference image. Then, it generates a distorted grid</c>
<c>* from which the rectification map is derived.</c>
<c>* </c>
<c>* Read and preprocess images</c>
<l>dev_close_window ()</l>
<l>ImgPath := '3d_machine_vision/grid_rectification/'</l>
<l>read_image (ImageRef, ImgPath + 'document_original')</l>
<l>get_image_size (ImageRef, WidthRef, HeightRef)</l>
<l>dev_open_window_fit_image (ImageRef, 0, 0, 600, 600, WindowHandleRef)</l>
<l>dev_display (ImageRef)</l>
<l>dev_open_window (0, 600 * WidthRef / HeightRef + 8, 50, 50, 'black', WindowHandleTest)</l>
<c>* </c>
<c>* Prepare the determine of corresponding points by component based matching</c>
<l>prepare_determination_of_corresponding_points (ImageRef, RootRanking, ComponentModelID, RowCompRef, ColumnCompRef, UpperRow, LowerRow, DRowUpper, DRowLower)</l>
<l>disp_continue_message (WindowHandleRef, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Online phase</c>
<l>for ImgNum := 1 to 2 by 1</l>
<l>    read_image (ImageTest, ImgPath + 'document_distorted_' + ImgNum$'02d')</l>
<l>    get_image_size (ImageTest, WidthTest, HeightTest)</l>
<l>    dev_open_window_fit_image (ImageRef, 0, 600 * WidthRef / HeightRef + 8, 600, 600, WindowHandleTest)</l>
<l>    dev_display (ImageTest)</l>
<l>    determine_corresponding_points (ImageTest, ComponentMarkers, DistortionMarkers, ComponentModelID, RootRanking, DRowUpper, DRowLower, UpperRow, LowerRow, ColumnCompRef, RowRef, ColRef, RowTest, ColTest)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (ComponentMarkers)</l>
<l>    dev_set_color ('orange red')</l>
<l>    dev_display (DistortionMarkers)</l>
<l>    disp_continue_message (WindowHandleRef, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Determine coordinates of distorted grid points</c>
<l>    GridSpacing := 10</l>
<l>    ColShift := mean(ColTest - ColRef)</l>
<l>    RefGridColValues := []</l>
<l>    for HelpCol := -0.5 to WidthTest + GridSpacing by GridSpacing</l>
<l>        RefGridColValues := [RefGridColValues,HelpCol + ColShift]</l>
<l>    endfor</l>
<l>    MinValue := 0</l>
<l>    MaxValue := HeightTest + GridSpacing</l>
<l>    sample_corresponding_values (RowTest, RowRef - 0.5, MinValue, MaxValue, GridSpacing, RefGridRowValues)</l>
<l>    RefGridRow := []</l>
<l>    RefGridCol := []</l>
<l>    dev_update_off ()</l>
<l>    Ones := gen_tuple_const(|RefGridColValues|,1)</l>
<l>    for r := 0 to |RefGridRowValues| - 1 by 1</l>
<l>        RefGridRow := [RefGridRow,RefGridRowValues[r] * Ones]</l>
<l>        RefGridCol := [RefGridCol,RefGridColValues]</l>
<l>    endfor</l>
<l>    dev_update_on ()</l>
<c>    * </c>
<c>    * Generate distortion map from distorted grid</c>
<l>    gen_arbitrary_distortion_map (Map, GridSpacing, RefGridRow, RefGridCol, |RefGridColValues|, WidthRef, HeightRef, 'bilinear')</l>
<c>    * </c>
<c>    * Map test image and compare it to reference image</c>
<l>    map_image (ImageRef, Map, ImageMapped)</l>
<l>    crop_part (ImageMapped, ImagePart, 0, 0, WidthTest, HeightTest)</l>
<l>    sub_image (ImagePart, ImageTest, ImageSub, 1, 128)</l>
<l>    dev_display (ImageSub)</l>
<l>    disp_continue_message (WindowHandleRef, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Visualize  differences</c>
<l>    MinDev := 100</l>
<l>    MinSize := 5</l>
<l>    visualize_differences (ImageSub, ImageTest, ComponentMarkers, DistortionMarkers, MinDev, MinSize, 1)</l>
<l>    disp_continue_message (WindowHandleRef, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>clear_component_model (ComponentModelID)</l>
<l>dev_update_window ('on')</l>
<l>dev_set_draw ('fill')</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="prepare_determination_of_corresponding_points">
<interface>
<io>
<par name="ImageRef" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="RootRanking" base_type="ctrl" dimension="0"/>
<par name="ComponentModelID" base_type="ctrl" dimension="0"/>
<par name="RowCompRef" base_type="ctrl" dimension="0"/>
<par name="ColumnCompRef" base_type="ctrl" dimension="0"/>
<par name="UpperRow" base_type="ctrl" dimension="0"/>
<par name="LowerRow" base_type="ctrl" dimension="0"/>
<par name="DRowUpper" base_type="ctrl" dimension="0"/>
<par name="DRowLower" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Determine long horizontal regions and their upper and lower bounds</c>
<l>extract_long_horizontal_regions (ImageRef, LongHorizontalRegions)</l>
<c>* </c>
<c>* Create a component model</c>
<l>create_component_model (ImageRef, LongHorizontalRegions, 100, 5, 0.0, 0, 0, 50, 100, 0, 10, 0.5, 5, 'auto', 'point_reduction_low', 'use_polarity', 'false', ComponentModelID, RootRanking)</l>
<c>* </c>
<c>* Determine the reference points of the components</c>
<c>* and the distances from the reference points of</c>
<c>* the components to their upper and lower bounds.</c>
<l>area_center (LongHorizontalRegions, Area, RowCompRef, ColumnCompRef)</l>
<l>smallest_rectangle1 (LongHorizontalRegions, UpperRow, Column1, LowerRow, Column2)</l>
<l>DRowUpper := UpperRow - RowCompRef</l>
<l>DRowLower := LowerRow - RowCompRef</l>
<l>return ()</l>
</body>
<docu id="prepare_determination_of_corresponding_points">
<short lang="en_US">Offline preparation of the component model</short>
<parameters>
<parameter id="ColumnCompRef"/>
<parameter id="ComponentModelID"/>
<parameter id="DRowLower"/>
<parameter id="DRowUpper"/>
<parameter id="ImageRef"/>
<parameter id="LowerRow"/>
<parameter id="RootRanking"/>
<parameter id="RowCompRef"/>
<parameter id="UpperRow"/>
</parameters>
</docu>
</procedure>
<procedure name="sample_corresponding_values">
<interface>
<ic>
<par name="Values" base_type="ctrl" dimension="0"/>
<par name="CorrespondingValues" base_type="ctrl" dimension="0"/>
<par name="MinValue" base_type="ctrl" dimension="0"/>
<par name="MaxValue" base_type="ctrl" dimension="0"/>
<par name="InterpolationInterval" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="SampledCorrespondingValues" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Shift0 := CorrespondingValues[0] - Values[0]</l>
<l>ShiftN := CorrespondingValues[|CorrespondingValues| - 1] - Values[|Values| - 1]</l>
<l>create_funct_1d_pairs (Values, CorrespondingValues, Function)</l>
<l>sample_funct_1d (Function, MinValue, MaxValue, InterpolationInterval, 'zero', SampledFunction)</l>
<l>funct_1d_to_pairs (SampledFunction, EquidistantFromValues, SampledCorrespondingValues)</l>
<l>i := 0</l>
<l>while (SampledCorrespondingValues[i] == 0)</l>
<l>    SampledCorrespondingValues[i] := EquidistantFromValues[i] + Shift0</l>
<l>    i := i + 1</l>
<l>endwhile</l>
<l>i := |SampledCorrespondingValues| - 1</l>
<l>while (SampledCorrespondingValues[i] == 0)</l>
<l>    SampledCorrespondingValues[i] := EquidistantFromValues[i] + ShiftN</l>
<l>    i := i - 1</l>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="sample_corresponding_values">
<short lang="en_US">Determine the corresponding values to the equidistant (InterpolationInterval) values. (Linear interpolation between the given pairs of values/corresponding values).</short>
<parameters>
<parameter id="CorrespondingValues"/>
<parameter id="InterpolationInterval"/>
<parameter id="MaxValue"/>
<parameter id="MinValue"/>
<parameter id="SampledCorrespondingValues"/>
<parameter id="Values"/>
</parameters>
</docu>
</procedure>
<procedure name="visualize_differences">
<interface>
<io>
<par name="ImageSub" base_type="iconic" dimension="0"/>
<par name="ImageTest" base_type="iconic" dimension="0"/>
<par name="ComponentMarkers" base_type="iconic" dimension="0"/>
<par name="DistortionMarkers" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MinDev" base_type="ctrl" dimension="0"/>
<par name="MinSize" base_type="ctrl" dimension="0"/>
<par name="VisualizationType" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (ImageSub, Region, [0,128 + MinDev], [128 - MinDev,255])</l>
<l>closing_circle (Region, RegionClosing, 3.5)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageTest)</l>
<l>Colors := ['red','blue']</l>
<l>dev_update_window ('off')</l>
<l>for i := 1 to 2 by 1</l>
<l>    select_obj (RegionClosing, ObjectSelected, i)</l>
<l>    connection (ObjectSelected, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', MinSize, 99999)</l>
<l>    dev_set_color (Colors[i - 1])</l>
<l>    if (VisualizationType == 0)</l>
<l>        fill_up (SelectedRegions, RegionFillUp)</l>
<l>        intersection (Region, RegionFillUp, RegionIntersection)</l>
<l>        dev_display (RegionIntersection)</l>
<l>    else</l>
<l>        dilation_circle (SelectedRegions, RegionDilation, 3.5)</l>
<l>        area_center (RegionDilation, Area, Row, Col)</l>
<l>        elliptic_axis (RegionDilation, Ra, Rb, Phi)</l>
<l>        gen_ellipse_contour_xld (ContEllipse, Row, Col, Phi, Ra, Rb, gen_tuple_const(|Row|,0), gen_tuple_const(|Row|,6.28318), gen_tuple_const(|Row|,'positive'), 1.5)</l>
<l>        dev_display (ContEllipse)</l>
<l>    endif</l>
<l>endfor</l>
<l>dev_set_color ('green')</l>
<l>dev_display (ComponentMarkers)</l>
<l>dev_set_color ('orange red')</l>
<l>dev_display (DistortionMarkers)</l>
<l>return ()</l>
</body>
<docu id="visualize_differences">
<short lang="en_US">Visualizes the differences between the mapped reference and the test image</short>
<parameters>
<parameter id="ComponentMarkers"/>
<parameter id="DistortionMarkers"/>
<parameter id="ImageSub"/>
<parameter id="ImageTest"/>
<parameter id="MinDev"/>
<parameter id="MinSize"/>
<parameter id="VisualizationType"/>
</parameters>
</docu>
</procedure>
<procedure name="extract_long_horizontal_regions">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="LongHorizontalRegions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>mean_image (Image, ImageMean, 10, 10)</l>
<l>dyn_threshold (Image, ImageMean, RegionDynThresh, 5, 'light')</l>
<l>fill_up (RegionDynThresh, RegionFillUp)</l>
<l>connection (RegionFillUp, ConnectedRegions1)</l>
<l>opening_circle (ConnectedRegions1, RegionOpening, 1.5)</l>
<l>select_shape (RegionOpening, SelectedRegions, 'area', 'and', 150, 99999999)</l>
<l>union1 (SelectedRegions, RegionUnion)</l>
<l>closing_rectangle1 (RegionUnion, RegionClosing, 50, 1)</l>
<l>connection (RegionClosing, ConnectedRegions2)</l>
<l>dilation_circle (ConnectedRegions2, RegionDilation, 1.5)</l>
<l>smallest_rectangle1 (RegionDilation, Row1, Col1, Row2, Col2)</l>
<l>gen_empty_obj (LongHorizontalRegions)</l>
<l>Elongatedness := 1.0 * (Col2 - Col1) / (Row2 - Row1)</l>
<l>for i := 0 to |Elongatedness| - 1 by 1</l>
<l>    if (Elongatedness[i] &gt; 5)</l>
<l>        select_obj (RegionDilation, ObjectSelected, i + 1)</l>
<l>        concat_obj (LongHorizontalRegions, ObjectSelected, LongHorizontalRegions)</l>
<l>    endif</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="extract_long_horizontal_regions">
<short lang="en_US">Extracts long horizontal regions</short>
<parameters>
<parameter id="Image"/>
<parameter id="LongHorizontalRegions"/>
</parameters>
</docu>
</procedure>
<procedure name="determine_corresponding_points">
<interface>
<io>
<par name="ImageTest" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ComponentMarkers" base_type="iconic" dimension="0"/>
<par name="DistortionMarkers" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ComponentModelID" base_type="ctrl" dimension="0"/>
<par name="RootRanking" base_type="ctrl" dimension="0"/>
<par name="DRowUpper" base_type="ctrl" dimension="0"/>
<par name="DRowLower" base_type="ctrl" dimension="0"/>
<par name="UpperRow" base_type="ctrl" dimension="0"/>
<par name="LowerRow" base_type="ctrl" dimension="0"/>
<par name="ColumnCompRef" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RowRef" base_type="ctrl" dimension="0"/>
<par name="ColRef" base_type="ctrl" dimension="0"/>
<par name="RowTest" base_type="ctrl" dimension="0"/>
<par name="ColTest" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Find the component model in the test image and</c>
<c>* determine the upper and lower bounds of the respective components.</c>
<l>find_component_model (ImageTest, ComponentModelID, RootRanking, 0, 0, 0.5, 1, 0.5, 'select_new_root', 'search_from_best', 'none', 0.5, 'least_squares', 0, 0.7, ModelStart, ModelEnd, Score, RowComp, ColumnComp, AngleComp, ScoreComp, ModelComp)</l>
<l>RowTest := [RowComp + subset(DRowUpper,ModelComp),RowComp + subset(DRowLower,ModelComp)]</l>
<l>ColTest := [ColumnComp,ColumnComp]</l>
<c>* </c>
<c>* Select the only those components of the reference image</c>
<c>* that where found in the test image.</c>
<l>RowRef := [subset(UpperRow,ModelComp),subset(LowerRow,ModelComp)]</l>
<l>ColRef := [subset(ColumnCompRef,ModelComp),subset(ColumnCompRef,ModelComp)]</l>
<c>* </c>
<c>* Create markers for visualize distortions</c>
<l>get_image_size (ImageTest, WidthTest, HeightTest)</l>
<l>Number := |RowTest|</l>
<l>Number2 := Number / 2</l>
<l>tuple_gen_const (Number, 1, Ones)</l>
<l>ColMarker := WidthTest / 12.0</l>
<l>RowDiff := RowRef - RowTest</l>
<l>gen_cross_contour_xld (Cross, RowTest, ColMarker * Ones, 6, 0.785398)</l>
<l>gen_empty_obj (ComponentMarkers)</l>
<l>for i := 0 to Number2 - 1 by 1</l>
<l>    gen_contour_polygon_xld (Contour, [RowTest[i],RowTest[i + Number2]], [ColMarker,ColMarker])</l>
<l>    concat_obj (ComponentMarkers, Contour, ComponentMarkers)</l>
<l>    gen_contour_polygon_xld (Contour, [RowComp[i],RowComp[i]], [ColMarker,ColMarker - 10])</l>
<l>    concat_obj (ComponentMarkers, Contour, ComponentMarkers)</l>
<l>endfor</l>
<l>gen_empty_obj (DistortionMarkers)</l>
<l>for i := 0 to Number2 - 1 by 1</l>
<l>    if (fabs(RowDiff[i]) &gt; 0.5)</l>
<l>        gen_contour_polygon_xld (Contour, [RowComp[i],RowComp[i] + RowDiff[i]], [ColMarker - 10,ColMarker - 10])</l>
<l>        concat_obj (DistortionMarkers, Contour, DistortionMarkers)</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* Sort the point lists</c>
<l>tuple_sort_index (RowRef, Indices)</l>
<l>RowRef := subset(RowRef,Indices)</l>
<l>ColRef := subset(ColRef,Indices)</l>
<l>RowTest := subset(RowTest,Indices)</l>
<l>ColTest := subset(ColTest,Indices)</l>
<l>return ()</l>
</body>
<docu id="determine_corresponding_points">
<short lang="en_US">Online determination of corresponding points</short>
<parameters>
<parameter id="ColRef"/>
<parameter id="ColTest"/>
<parameter id="ColumnCompRef"/>
<parameter id="ComponentMarkers"/>
<parameter id="ComponentModelID"/>
<parameter id="DRowLower"/>
<parameter id="DRowUpper"/>
<parameter id="DistortionMarkers"/>
<parameter id="ImageTest"/>
<parameter id="LowerRow"/>
<parameter id="RootRanking"/>
<parameter id="RowRef"/>
<parameter id="RowTest"/>
<parameter id="UpperRow"/>
</parameters>
</docu>
</procedure>
</hdevelop>
