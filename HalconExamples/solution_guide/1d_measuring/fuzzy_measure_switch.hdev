<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program demonstrates the basic usage of a fuzzy measure object.</c>
<c>* Here, the task is to determine the width of and the distance between the</c>
<c>* pins of a switch.</c>
<c>* </c>
<c>* First, read in the image and initialize the program.</c>
<l>read_image (Image, 'bin_switch/bin_switch_2')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_resize_window_fit_size (0, 0, Width, Height, -1, 640)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Define the rectangular ROI within which the edges will be detected</c>
<c>* and create the measure.</c>
<l>Row := 290</l>
<l>Column := 170</l>
<l>Phi := rad(-130)</l>
<l>Length1 := 60</l>
<l>Length2 := 10</l>
<l>Interpolation := 'nearest_neighbor'</l>
<l>gen_measure_rectangle2 (Row, Column, Phi, Length1, Length2, Width, Height, Interpolation, MeasureHandle)</l>
<c>* </c>
<c>* Determine all edge pairs that have a negative transition, i.e., edge pairs</c>
<c>* that enclose dark regions.</c>
<l>Sigma := 1.1</l>
<l>Threshold := 20</l>
<l>Transition := 'negative'</l>
<l>Select := 'all'</l>
<l>measure_pairs (Image, MeasureHandle, Sigma, Threshold, Transition, Select, RowEdgeFirst, ColumnEdgeFirst, AmplitudeFirst, RowEdgeSecond, ColumnEdgeSecond, AmplitudeSecond, IntraDistance, InterDistance)</l>
<c>* </c>
<c>* Visualize the results</c>
<l>dev_display (Image)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('black')</l>
<l>gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<l>p_disp_dimensions (RowEdgeFirst, ColumnEdgeFirst, RowEdgeSecond, ColumnEdgeSecond, IntraDistance, InterDistance, Phi, Length2, WindowHandle)</l>
<c>* </c>
<l>disp_message (WindowHandle, 'Standard measure results', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Due to the reflections on the middle pin, its width cannot be determined correctly.</c>
<c>* </c>
<c>* As we know that the pins appear approximately 9 pixels wide, it is very easy to expand the measure to a</c>
<c>* fuzzy measure that will only return pairs that have a width of approximately the given size.</c>
<c>* </c>
<c>* First, create a fuzzy function that returns 1.0 for the given pair size and 0.0 for values that</c>
<c>* deviate more than 2 pixels from the given pair size.</c>
<l>create_funct_1d_pairs ([7,9,11], [0.0,1.0,0.0], SizeFunction)</l>
<c>* </c>
<c>* Then, expand the measure to a fuzzy measure that will return only pairs of approximately the given size.</c>
<l>SetType := 'size'</l>
<l>set_fuzzy_measure (MeasureHandle, SetType, SizeFunction)</l>
<c>* </c>
<c>* Finally, determine all edge pairs that have a negative transition and approximately the given size.</c>
<l>Sigma := 1.1</l>
<l>AmpThresh := 20</l>
<l>FuzzyThresh := 0.5</l>
<l>Transition := 'negative'</l>
<l>fuzzy_measure_pairs (Image, MeasureHandle, Sigma, AmpThresh, FuzzyThresh, Transition, RowEdgeFirst, ColumnEdgeFirst, AmplitudeFirst, RowEdgeSecond, ColumnEdgeSecond, AmplitudeSecond, RowEdgeCenter, ColumnEdgeCenter, FuzzyScore, IntraDistance, InterDistance)</l>
<c>* </c>
<c>* And again, visualize the results</c>
<l>dev_display (Image)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('black')</l>
<l>gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<l>p_disp_dimensions (RowEdgeFirst, ColumnEdgeFirst, RowEdgeSecond, ColumnEdgeSecond, IntraDistance, InterDistance, Phi, Length2, WindowHandle)</l>
<l>disp_message (WindowHandle, 'Fuzzy measure results', 'window', 12, 12, 'black', 'true')</l>
<c>* </c>
<c>* Free the memory that has been allocated for the measure.</c>
<l>close_measure (MeasureHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="p_disp_edge_marker">
<interface>
<ic>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Col" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Length" base_type="ctrl" dimension="0"/>
<par name="Color" base_type="ctrl" dimension="0"/>
<par name="LineWidth" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Determine start and end point of the edge marker.</c>
<l>RowStart := Row + Length * cos(Phi)</l>
<l>RowEnd := Row - Length * cos(Phi)</l>
<l>ColStart := Col + Length * sin(Phi)</l>
<l>ColEnd := Col - Length * sin(Phi)</l>
<c>* </c>
<c>* Generate a contour that connects the start and end point.</c>
<l>gen_contour_polygon_xld (Marker, [RowStart,RowEnd], [ColStart,ColEnd])</l>
<c>* </c>
<c>* Display the contour with  the specified style.</c>
<l>dev_set_color (Color)</l>
<l>dev_set_line_width (LineWidth)</l>
<l>dev_display (Marker)</l>
<c>* </c>
<c>* Reset the line width.</c>
<l>dev_set_line_width (1)</l>
<l>return ()</l>
</body>
<docu id="p_disp_edge_marker">
<short lang="en_US">Displays a marker, which indicates the position of an edge</short>
<parameters>
<parameter id="Col"/>
<parameter id="Color"/>
<parameter id="Length"/>
<parameter id="LineWidth"/>
<parameter id="Phi"/>
<parameter id="Row"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="p_disp_dimensions">
<interface>
<ic>
<par name="RowEdgeFirst" base_type="ctrl" dimension="0"/>
<par name="ColumnEdgeFirst" base_type="ctrl" dimension="0"/>
<par name="RowEdgeSecond" base_type="ctrl" dimension="0"/>
<par name="ColumnEdgeSecond" base_type="ctrl" dimension="0"/>
<par name="IntraDistance" base_type="ctrl" dimension="0"/>
<par name="InterDistance" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Length" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Loop over all edge pairs.</c>
<l>Number := |RowEdgeFirst|</l>
<l>for i := 0 to Number - 1 by 1</l>
<c>    * </c>
<c>    * Display markers for the edges.</c>
<l>    p_disp_edge_marker (RowEdgeFirst[i], ColumnEdgeFirst[i], Phi, Length, 'white', 2, WindowHandle)</l>
<l>    p_disp_edge_marker (RowEdgeSecond[i], ColumnEdgeSecond[i], Phi, Length, 'white', 2, WindowHandle)</l>
<c>    * </c>
<c>    * Display the IntraDistance between the edges.</c>
<l>    Text := IntraDistance[i]</l>
<l>    p_disp_text_right_of_center (WindowHandle, Text$'.2f', RowEdgeFirst[i], ColumnEdgeFirst[i], RowEdgeSecond[i], ColumnEdgeSecond[i], Phi, 2.0 * Length)</l>
<l>endfor</l>
<c>* </c>
<c>* Loop to display the distance between the edge pairs.</c>
<l>for i := 0 to Number - 2 by 1</l>
<c>    * </c>
<c>    * Display the InterDistance between the edge pairs.</c>
<l>    Text := InterDistance[i]</l>
<l>    p_disp_text_left_of_center (WindowHandle, Text$'.2f', RowEdgeSecond[i], ColumnEdgeSecond[i], RowEdgeFirst[i + 1], ColumnEdgeFirst[i + 1], Phi, 2.0 * Length)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="p_disp_dimensions">
<short lang="en_US">Displays the dimension of the measured edge pairs.</short>
<parameters>
<parameter id="ColumnEdgeFirst"/>
<parameter id="ColumnEdgeSecond"/>
<parameter id="InterDistance"/>
<parameter id="IntraDistance"/>
<parameter id="Length"/>
<parameter id="Phi"/>
<parameter id="RowEdgeFirst"/>
<parameter id="RowEdgeSecond"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="p_disp_text_right_of_center">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Text" base_type="ctrl" dimension="0"/>
<par name="RowFirst" base_type="ctrl" dimension="0"/>
<par name="ColFirst" base_type="ctrl" dimension="0"/>
<par name="RowSecond" base_type="ctrl" dimension="0"/>
<par name="ColSecond" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Distance" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Determine factors for the adaptation of the string extents that might be necessary</c>
<c>* because of image zooming.</c>
<l>get_part (WindowHandle, Row1Part, Column1Part, Row2Part, Column2Part)</l>
<l>get_window_extents (WindowHandle, RowWin, ColumnWin, WidthWin, HeightWin)</l>
<l>FactorRow := 1. * (Row2Part - Row1Part + 1) / HeightWin</l>
<l>FactorColumn := 1. * (Column2Part - Column1Part + 1) / WidthWin</l>
<c>* </c>
<c>* Determine the extent of the string and its position.</c>
<l>get_string_extents (WindowHandle, Text, Ascent, Descent, Width, Height)</l>
<l>Width := Width * FactorColumn</l>
<l>Height := Height * FactorRow</l>
<l>RowCenter := (RowFirst + RowSecond) / 2.0</l>
<l>ColCenter := (ColFirst + ColSecond) / 2.0</l>
<l>if (sin(Phi) &lt; 0)</l>
<l>    Distance := -Distance</l>
<l>endif</l>
<l>RowPos := RowCenter + Distance * cos(Phi)</l>
<l>ColPos := ColCenter + Distance * sin(Phi)</l>
<l>RowText := RowPos - Height / 2.0</l>
<l>ColText := ColPos</l>
<c>* </c>
<c>* Set the text position and color and display the text.</c>
<l>set_tposition (WindowHandle, RowText, ColText)</l>
<l>dev_set_color ('black')</l>
<l>write_string (WindowHandle, Text)</l>
<l>return ()</l>
</body>
<docu id="p_disp_text_right_of_center">
<short lang="en_US">Displays text right of the center of two given points.</short>
<parameters>
<parameter id="ColFirst"/>
<parameter id="ColSecond"/>
<parameter id="Distance"/>
<parameter id="Phi"/>
<parameter id="RowFirst"/>
<parameter id="RowSecond"/>
<parameter id="Text"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="p_disp_text_left_of_center">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Text" base_type="ctrl" dimension="0"/>
<par name="RowFirst" base_type="ctrl" dimension="0"/>
<par name="ColFirst" base_type="ctrl" dimension="0"/>
<par name="RowSecond" base_type="ctrl" dimension="0"/>
<par name="ColSecond" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Distance" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Determine factors for the adaptation of the string extents that might be necessary</c>
<c>* because of image zooming.</c>
<l>get_part (WindowHandle, Row1Part, Column1Part, Row2Part, Column2Part)</l>
<l>get_window_extents (WindowHandle, RowWin, ColumnWin, WidthWin, HeightWin)</l>
<l>FactorRow := 1. * (Row2Part - Row1Part + 1) / HeightWin</l>
<l>FactorColumn := 1. * (Column2Part - Column1Part + 1) / WidthWin</l>
<c>* </c>
<c>* Determine the extent of the string and its position.</c>
<l>get_string_extents (WindowHandle, Text, Ascent, Descent, Width, Height)</l>
<l>Width := Width * FactorColumn</l>
<l>Height := Height * FactorRow</l>
<l>RowCenter := (RowFirst + RowSecond) / 2.0</l>
<l>ColCenter := (ColFirst + ColSecond) / 2.0</l>
<l>if (sin(Phi) &lt; 0)</l>
<l>    Distance := -Distance</l>
<l>endif</l>
<l>RowPos := RowCenter - Distance * cos(Phi)</l>
<l>ColPos := ColCenter - Distance * sin(Phi)</l>
<l>RowText := RowPos - Height / 2.0</l>
<l>ColText := ColPos - Width</l>
<c>* </c>
<c>* Set the text position and color and display the text.</c>
<l>set_tposition (WindowHandle, RowText, ColText)</l>
<l>dev_set_color ('black')</l>
<l>write_string (WindowHandle, Text)</l>
<l>return ()</l>
</body>
<docu id="p_disp_text_left_of_center">
<short lang="en_US">Displays text right of the center of two given points.</short>
<parameters>
<parameter id="ColFirst"/>
<parameter id="ColSecond"/>
<parameter id="Distance"/>
<parameter id="Phi"/>
<parameter id="RowFirst"/>
<parameter id="RowSecond"/>
<parameter id="Text"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
