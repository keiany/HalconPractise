<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This program shows how to determine a gray value profile with the operator measure_projection.</c>
<c>* From this gray value profile, 1D lines, i.e., lines that run approximately perpendicular to the profile line,</c>
<c>* are extracted.</c>
<c>* Then, the profile positions of the lines are transformed into pixel coordinates (row,col).</c>
<c>* Finally, the pixel coordinates are transformed into a metric world coordinate system.</c>
<c>* </c>
<l>dev_close_window ()</l>
<c>* Read the image and init the program.</c>
<l>read_image (ImageOrig, 'caliper/caliper_1')</l>
<l>rotate_image (ImageOrig, Image, 90, 'constant')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window_fit_image (Image, 0, 0, 640, 640, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Define the rectangle within which the lines must be determined.</c>
<l>Row := 370</l>
<l>Column := 305</l>
<l>Phi := rad(-101)</l>
<l>Length1 := 220</l>
<l>Length2 := 3</l>
<c>* </c>
<c>* Create the measure and determine the gray value profile.</c>
<l>gen_measure_rectangle2 (Row, Column, Phi, Length1, Length2, Width, Height, 'bilinear', MeasureHandle)</l>
<l>measure_projection (Image, MeasureHandle, GrayValues)</l>
<c>* </c>
<c>* Onedimensional line extraction</c>
<c>* First, smooth the gray value profile and determine the first and second derivative.</c>
<l>Sigma := 0.3</l>
<l>create_funct_1d_array (GrayValues, Function)</l>
<l>smooth_funct_1d_gauss (Function, Sigma, SmoothedFunction)</l>
<l>derivate_funct_1d (SmoothedFunction, 'first', FirstDerivative)</l>
<l>derivate_funct_1d (SmoothedFunction, 'second', SecondDerivative)</l>
<c>* </c>
<c>* Determine the positions of the zero crossings of the first derivative, i.e.,</c>
<c>* the positions at which the (smoothed) gray value profile has minima and maxima.</c>
<l>zero_crossings_funct_1d (FirstDerivative, ZeroCrossings)</l>
<c>* </c>
<c>* Select the positions of those minima (i.e., positions at which the second derivative is positive)</c>
<c>* where the smoothed gray value profile has a high curvature, i.e., where the second derivative</c>
<c>*  has a large absolute value. This criterion ensures that only salient lines are selected.</c>
<l>MinimumMagnitudeOfSecondDerivative := 8</l>
<l>PositionOfSalientLine := []</l>
<l>for i := 0 to |ZeroCrossings| - 1 by 1</l>
<l>    get_y_value_funct_1d (SecondDerivative, ZeroCrossings[i], 'constant', Y)</l>
<l>    if (Y &gt; MinimumMagnitudeOfSecondDerivative)</l>
<l>        PositionOfSalientLine := [PositionOfSalientLine,ZeroCrossings[i]]</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* Determine the image coordinates from the profile positions.</c>
<c>* Note that internally, the center of the measure ROI is set to (floor(Row+0.5), floor(Column+0.5))</c>
<c>* and the lengths are set to floor(Length1) and floor(Length2).</c>
<l>RowStart := floor(Row + 0.5) + floor(Length1) * sin(Phi)</l>
<l>ColStart := floor(Column + 0.5) - floor(Length1) * cos(Phi)</l>
<l>RowLine := RowStart - PositionOfSalientLine * sin(Phi)</l>
<l>ColLine := ColStart + PositionOfSalientLine * cos(Phi)</l>
<c>* </c>
<c>* Display the determined lines.</c>
<l>dev_display (Image)</l>
<l>p_disp_edge_marker (RowLine, ColLine, Phi, Length2, 'black', 5)</l>
<l>p_disp_edge_marker (RowLine, ColLine, Phi, Length2, 'white', 3)</l>
<l>disp_message (WindowHandle, 'Determined pitch lines', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Display a zoomed part of the above visualization.</c>
<l>dev_open_window_fit_size (0, Width + 10, Width, Height, 640, 640, WindowHandleZoom)</l>
<l>RowZoomCenter := int((RowLine[3] + RowLine[4]) / 2)</l>
<l>ColZoomCenter := int((ColLine[3] + ColLine[4]) / 2)</l>
<l>dev_set_part (RowZoomCenter - Height / 20, ColZoomCenter - Width / 20, RowZoomCenter + Height / 20, ColZoomCenter + Width / 20)</l>
<l>dev_display (Image)</l>
<l>p_disp_edge_marker (RowLine, ColLine, Phi, Length2, 'black', 5)</l>
<l>p_disp_edge_marker (RowLine, ColLine, Phi, Length2, 'white', 3)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Transform the image coordinates into a metric coordinate system.</c>
<c>* Here, the camera parameters and the pose of the object are assumed</c>
<c>* to be known. If this is not the case, the camera parameter and the pose</c>
<c>* must be determined with HALCON's camera calibration (see, e.g., the</c>
<c>* Application Note on 3D Machine Vision).</c>
<l>gen_cam_par_area_scan_division (0.00846, -2591.63, 7.2956e-6, 7.3e-6, 240.74, 334.91, Width, Height, CamParam)</l>
<l>create_pose (-0.100432, -0.051077, 0.257936, 323.234, 4.615, 0.229, 'Rp+T', 'gba', 'point', WorldPose)</l>
<l>image_points_to_world_plane (CamParam, WorldPose, RowLine, ColLine, 'mm', X, Y)</l>
<c>* </c>
<c>* Now, e.g., the distances between the measured lines can be calculated.</c>
<l>Num := |X|</l>
<l>distance_pp (X[0:Num - 2], Y[0:Num - 2], X[1:Num - 1], Y[1:Num - 1], Distance)</l>
<c>* </c>
<c>* Display the distances.</c>
<l>for i := 0 to |Distance| - 1 by 1</l>
<l>    disp_message (WindowHandle, Distance[i]$'5.2f' + ' mm', 'image', (RowLine[i] + RowLine[i + 1]) / 2 - 8, (ColLine[i] + ColLine[i + 1]) / 2 + 15, 'white', 'false')</l>
<l>endfor</l>
<l>disp_message (WindowHandle, 'Determined pitch lines', 'window', 12, 12, 'black', 'true')</l>
<c>* </c>
<c>* Close the measure.</c>
<l>close_measure (MeasureHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="p_disp_edge_marker">
<interface>
<ic>
<par name="Rows" base_type="ctrl" dimension="0"/>
<par name="Cols" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Length" base_type="ctrl" dimension="0"/>
<par name="Color" base_type="ctrl" dimension="0"/>
<par name="LineWidth" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Determine the number of edges</c>
<l>NumRows := |Rows|</l>
<l>NumCols := |Cols|</l>
<l>Num := min([NumRows,NumCols])</l>
<c>* </c>
<c>* Loop over the edges</c>
<l>for i := 0 to Num - 1 by 1</l>
<l>    Row := Rows[i]</l>
<l>    Col := Cols[i]</l>
<c>    * </c>
<c>    * Determine start and end point of the edge marker.</c>
<l>    RowStart := Row + Length * cos(Phi)</l>
<l>    RowEnd := Row - Length * cos(Phi)</l>
<l>    ColStart := Col + Length * sin(Phi)</l>
<l>    ColEnd := Col - Length * sin(Phi)</l>
<c>    * </c>
<c>    * Generate a contour that connects the start and end point.</c>
<l>    gen_contour_polygon_xld (Marker, [RowStart,RowEnd], [ColStart,ColEnd])</l>
<c>    * </c>
<c>    * Display the contour with  the specified style.</c>
<l>    dev_set_color (Color)</l>
<l>    dev_set_line_width (LineWidth)</l>
<l>    dev_display (Marker)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="p_disp_edge_marker">
<short lang="en_US">Displays a marker, which indicates the position of an edge</short>
<parameters>
<parameter id="Color"/>
<parameter id="Cols"/>
<parameter id="Length"/>
<parameter id="LineWidth"/>
<parameter id="Phi"/>
<parameter id="Rows"/>
</parameters>
</docu>
</procedure>
</hdevelop>
