<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* ------------------------------------------------------------------------------------------------</c>
<c>* This example program presents the basic operators for image acquisition</c>
<c>* in a simple application.</c>
<c>* NOTE: The example is preconfigured for the SaperaLT image acquisition interface.</c>
<c>*       Please adapt the marked lines for your own image acquisition device.</c>
<c>* ------------------------------------------------------------------------------------------------</c>
<c>* general configuration of HDevelop</c>
<l>set_system ('do_low_error', 'true')</l>
<l>dev_update_window ('off')</l>
<l>stop ()</l>
<c>* step 1: connect to the image acquisition device</c>
<c>* -&gt; Please adapt the following lines for your own image acquisition device.</c>
<l>AcqName := 'SaperaLT'</l>
<l>myBoard := 'X64-CL_iPro_1'</l>
<l>myCameraConfigFilename := 'T_CSB1100CL_10-bits_Default.ccf'</l>
<l>CameraConfigFileDir := 'C:/Program Files/Teledyne DALSA/Sapera/CamFiles/User'</l>
<l>CameraType := CameraConfigFileDir + myCameraConfigFilename</l>
<l>open_framegrabber (AcqName, 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', CameraType, myBoard, -1, -1, AcqHandle)</l>
<l>stop ()</l>
<c>* step 2: grab a first image and adjust the window size</c>
<l>grab_image (Image, AcqHandle)</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width / 2, Height / 2, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_display (Image)</l>
<l>stop ()</l>
<c>* step 3: grab and process images in a loop (exit with left mouse button)</c>
<l>dev_open_window (0, Width / 2 + 8, Width / 2, Height / 2, 'black', WindowHandleProcess)</l>
<l>dev_set_colored (12)</l>
<l>dev_open_window (Height / 2 + 68, 0, Width / 2, Height / 16, 'light gray', WindowHandleButton)</l>
<l>dev_set_part (0, 0, Height / 16 - 1, Width / 2 - 1)</l>
<l>write_string (WindowHandleButton, ' click here with left mouse button to exit loop')</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>Button := 0</l>
<l>while (Button != 1)</l>
<l>    grab_image (Image, AcqHandle)</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    dev_display (Image)</l>
<c>    * -&gt; process image (segment with an automatically determined threshold)</c>
<l>    auto_threshold (Image, Regions, 4)</l>
<l>    connection (Regions, ConnectedRegions)</l>
<l>    dev_set_window (WindowHandleProcess)</l>
<l>    dev_display (ConnectedRegions)</l>
<c>    * -&gt; check for a click into the window (error handling switched off, otherwise the cursor must always be in the window)</c>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowHandleButton, Row, Column, Button)</l>
<l>    dev_set_check ('give_error')</l>
<l>endwhile</l>
<l>dev_set_window (WindowHandleButton)</l>
<l>dev_close_window ()</l>
<l>dev_set_window (WindowHandleProcess)</l>
<l>dev_close_window ()</l>
<l>stop ()</l>
<c>* clean up</c>
<l>dev_update_window ('on')</l>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
