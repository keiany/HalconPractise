<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This program inspects metal part by fitting lines and circles into contours</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* step: acquire image</c>
<c>* </c>
<l>read_image (Image, 'metal-parts/metal-parts-01')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'light gray', WindowID)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('white')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowID, 16, 'mono', 'true', 'false')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: get center, area, and orientation via region processing</c>
<c>* </c>
<l>dev_set_draw ('fill')</l>
<l>threshold (Image, Region, 100, 255)</l>
<l>area_center (Region, AreaRegion, RowCenterRegion, ColumnCenterRegion)</l>
<l>orientation_region (Region, OrientationRegion)</l>
<l>dev_display (Region)</l>
<l>disp_message (WindowID, 'Center Row: ' + RowCenterRegion$'.5', 'window', 20, 10, 'white', 'false')</l>
<l>disp_message (WindowID, 'Area: ' + AreaRegion + ' pixel', 'window', 20, 300, 'white', 'false')</l>
<l>disp_message (WindowID, 'Center Column:  ' + ColumnCenterRegion$'.5', 'window', 60, 10, 'white', 'false')</l>
<l>disp_message (WindowID, 'Orientation: ' + OrientationRegion$'.3' + ' rad', 'window', 60, 300, 'white', 'false')</l>
<l>dev_set_color ('gray')</l>
<l>disp_cross (WindowID, RowCenterRegion, ColumnCenterRegion, 15, 0)</l>
<l>disp_arrow (WindowID, RowCenterRegion, ColumnCenterRegion, RowCenterRegion - 60 * sin(OrientationRegion), ColumnCenterRegion + 60 * cos(OrientationRegion), 2)</l>
<l>stop ()</l>
<c>* </c>
<c>* step: create contours</c>
<c>* </c>
<l>edges_sub_pix (Image, Edges, 'canny', 0.6, 30, 70)</l>
<c>* </c>
<c>* step: segment contours</c>
<c>* </c>
<l>segment_contours_xld (Edges, ContoursSplit, 'lines_circles', 6, 4, 4)</l>
<l>dev_clear_window ()</l>
<l>dev_set_colored (12)</l>
<l>dev_display (ContoursSplit)</l>
<l>stop ()</l>
<c>* </c>
<c>* step: open zoom window</c>
<c>* </c>
<l>dev_open_window (0, round(Width / 2), (535 - 225) * 2, (395 - 115) * 2, 'black', WindowHandleZoom)</l>
<l>dev_set_part (round(115), round(225), round(395), round(535))</l>
<l>set_display_font (WindowHandleZoom, 18, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* step: fit circles into contours</c>
<c>* </c>
<l>count_obj (ContoursSplit, NumSegments)</l>
<l>dev_display (Image)</l>
<l>NumCircles := 0</l>
<l>RowsCenterCircle := []</l>
<l>ColumnsCenterCircle := []</l>
<l>disp_message (WindowHandleZoom, 'Circle radii: ', 'window', 120, 230, 'white', 'false')</l>
<l>for i := 1 to NumSegments by 1</l>
<l>    select_obj (ContoursSplit, SingleSegment, i)</l>
<l>    get_contour_global_attrib_xld (SingleSegment, 'cont_approx', Attrib)</l>
<l>    if (Attrib == 1)</l>
<l>        NumCircles := NumCircles + 1</l>
<l>        fit_circle_contour_xld (SingleSegment, 'atukey', -1, 2, 0, 5, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>        gen_circle_contour_xld (ContCircle, Row, Column, Radius, 0, rad(360), 'positive', 1)</l>
<l>        RowsCenterCircle := [RowsCenterCircle,Row]</l>
<l>        ColumnsCenterCircle := [ColumnsCenterCircle,Column]</l>
<l>        dev_display (ContCircle)</l>
<l>        disp_message (WindowHandleZoom, 'C' + NumCircles, 'window', Row - Radius - 10, Column, 'white', 'false')</l>
<l>        disp_message (WindowHandleZoom, 'C' + NumCircles + ': Radius = ' + Radius$'.4', 'window', 275 + NumCircles * 15, 230, 'white', 'false')</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* step: get distance between circle centers</c>
<c>* </c>
<l>distance_pp (RowsCenterCircle[1], ColumnsCenterCircle[1], RowsCenterCircle[2], ColumnsCenterCircle[2], Distance_2_3)</l>
<l>disp_line (WindowHandleZoom, RowsCenterCircle[1], ColumnsCenterCircle[1], RowsCenterCircle[2], ColumnsCenterCircle[2])</l>
<l>disp_message (WindowHandleZoom, 'Distance C2-C3 = ' + Distance_2_3$'.4', 'window', 275 + (NumCircles + 3) * 15, 230, 'magenta', 'false')</l>
<l>distance_pp (RowsCenterCircle[0], ColumnsCenterCircle[0], RowsCenterCircle[2], ColumnsCenterCircle[2], Distance_1_3)</l>
<l>disp_line (WindowHandleZoom, RowsCenterCircle[0], ColumnsCenterCircle[0], RowsCenterCircle[2], ColumnsCenterCircle[2])</l>
<l>disp_message (WindowHandleZoom, 'Distance C1-C3 = ' + Distance_1_3$'.4', 'window', 275 + (NumCircles + 2) * 15, 230, 'yellow', 'false')</l>
<l>distance_pp (RowsCenterCircle[3], ColumnsCenterCircle[3], RowsCenterCircle[4], ColumnsCenterCircle[4], Distance_4_5)</l>
<l>disp_line (WindowHandleZoom, RowsCenterCircle[3], ColumnsCenterCircle[3], RowsCenterCircle[4], ColumnsCenterCircle[4])</l>
<l>disp_message (WindowHandleZoom, 'Distance C4-C5 = ' + Distance_4_5$'.4', 'window', 275 + (NumCircles + 4) * 15, 230, 'cyan', 'false')</l>
<l>stop ()</l>
<c>* </c>
<l>dev_set_window (WindowHandleZoom)</l>
<l>dev_close_window ()</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
