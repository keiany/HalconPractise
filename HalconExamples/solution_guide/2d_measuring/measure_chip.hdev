<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This program inspects the relation between two rectangular</c>
<c>* parts of a chip. The position, orientation, and extent of each</c>
<c>* rectangle is obtained by a rectangle fitting</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* step: acquire image</c>
<c>* </c>
<l>read_image (Image, 'die_on_chip')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width * 2, Height * 2, 'light gray', WindowID)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('white')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowID, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* step: extract contours for the die</c>
<c>* </c>
<c>* step: create ROI</c>
<c>* </c>
<l>dev_set_line_width (2)</l>
<l>dev_set_draw ('fill')</l>
<l>fast_threshold (Image, Region, 120, 255, 20)</l>
<l>opening_rectangle1 (Region, RegionOpening, 4, 4)</l>
<l>connection (RegionOpening, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, RegionFillUp)</l>
<l>select_shape (RegionFillUp, SelectedRegions, ['rectangularity','area'], 'and', [0.8,700], [1,99999])</l>
<l>smallest_rectangle2 (SelectedRegions, Row, Column, Phi, Length1, Length2)</l>
<l>gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<l>boundary (Rectangle, RegionBorder, 'inner_filled')</l>
<l>dilation_rectangle1 (RegionBorder, RegionDilation, 4, 4)</l>
<l>reduce_domain (Image, RegionDilation, ImageReduced)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageReduced)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: create contours</c>
<c>* </c>
<l>edges_sub_pix (ImageReduced, Edges, 'canny', 1.5, 30, 40)</l>
<l>segment_contours_xld (Edges, ContoursSplit, 'lines', 5, 2, 2)</l>
<l>select_contours_xld (ContoursSplit, SelectedContours1, 'contour_length', 10, 99999, -0.5, 0.5)</l>
<l>union_adjacent_contours_xld (SelectedContours1, UnionContours1, 30, 1, 'attr_keep')</l>
<c>* </c>
<c>* step: fit rectangle</c>
<c>* </c>
<l>fit_rectangle2_contour_xld (UnionContours1, 'tukey', -1, 0, 0, 3, 2, Row1, Column1, Phi1, Length11, Length12, PointOrder1)</l>
<l>gen_rectangle2_contour_xld (Rectangle1, Row1, Column1, Phi1, Length11, Length12)</l>
<c>* </c>
<c>* step: extract contours for the frame</c>
<c>* </c>
<c>* step: create ROI</c>
<c>* </c>
<l>fast_threshold (Image, Region1, 65, 255, 20)</l>
<l>connection (Region1, ConnectedRegions1)</l>
<l>opening_rectangle1 (ConnectedRegions1, RegionOpening1, 10, 10)</l>
<l>fill_up (RegionOpening1, RegionFillUp1)</l>
<l>select_shape (RegionFillUp1, SelectedRegions1, 'area', 'and', 1000, 99999)</l>
<l>boundary (SelectedRegions1, RegionBorder1, 'inner')</l>
<l>dilation_rectangle1 (RegionBorder1, RegionDilation1, 10, 10)</l>
<l>reduce_domain (Image, RegionDilation1, ImageReduced1)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageReduced1)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: create contours</c>
<c>* </c>
<l>threshold_sub_pix (ImageReduced1, Border1, 70)</l>
<l>segment_contours_xld (Border1, ContoursSplit2, 'lines', 5, 2, 2)</l>
<l>select_contours_xld (ContoursSplit2, SelectedContours2, 'contour_length', 30, 99999, -0.5, 0.5)</l>
<l>union_adjacent_contours_xld (SelectedContours2, UnionContours2, 30, 1, 'attr_keep')</l>
<c>* </c>
<c>* step: fit rectangle</c>
<c>* </c>
<l>fit_rectangle2_contour_xld (UnionContours2, 'tukey', -1, 0, 0, 3, 2, Row2, Column2, Phi2, Length21, Length22, PointOrder2)</l>
<l>gen_rectangle2_contour_xld (Rectangle2, Row2, Column2, Phi2, Length21, Length22)</l>
<c>* </c>
<c>* </c>
<c>* step: get relation between both rectangles + visualization</c>
<c>* </c>
<l>dev_clear_window ()</l>
<l>dev_set_colored (3)</l>
<l>* dev_display (Image)</l>
<l>dev_display (SelectedContours1)</l>
<l>dev_display (SelectedContours2)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (UnionContours1)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (UnionContours2)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('white')</l>
<l>dev_display (Rectangle1)</l>
<l>gen_cross_contour_xld (Cross1, Row1, Column1, 6, Phi1)</l>
<l>dev_display (Cross1)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (Rectangle2)</l>
<l>gen_cross_contour_xld (Cross2, Row2, Column2, 6, Phi2)</l>
<l>dev_display (Cross2)</l>
<l>distance_pp (Row1, Column1, Row2, Column2, Distance)</l>
<l>DifferenceOrientation := Phi1 - Phi2</l>
<l>set_tposition (WindowID, 10, 10)</l>
<l>write_string (WindowID, 'Distance between centers: ' + Distance$'.3' + ' pixel')</l>
<l>set_tposition (WindowID, 25, 10)</l>
<l>write_string (WindowID, 'Difference between orientations: ' + deg(DifferenceOrientation)$'.2' + ' deg')</l>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
