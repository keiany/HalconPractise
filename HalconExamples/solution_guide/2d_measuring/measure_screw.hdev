<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This program inspects the dimensions of a screw</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* step: acquire image</c>
<c>* </c>
<l>read_image (Image, 'screw_thread')</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width / 2, Height / 2, 'light gray', WindowID)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('blue')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowID, 14, 'mono', 'true', 'false')</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: initialize visualization</c>
<c>* </c>
<l>dev_set_draw ('fill')</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('black')</l>
<c>* </c>
<c>* step: get orientation via region processing</c>
<c>* </c>
<l>threshold (Image, Region, 0, 100)</l>
<l>orientation_region (Region, OrientationRegion)</l>
<l>area_center (Region, Area, RowCenter, ColumnCenter)</l>
<c>* </c>
<c>* step: rotate screw region to become vertical</c>
<c>* </c>
<l>vector_angle_to_rigid (RowCenter, ColumnCenter, OrientationRegion, RowCenter, ColumnCenter, rad(90), HomMat2DRotate)</l>
<l>affine_trans_region (Region, RegionAffineTrans, HomMat2DRotate, 'nearest_neighbor')</l>
<l>dev_clear_window ()</l>
<l>disp_message (WindowID, 'Region (transformed)', 'window', 12, 12, 'black', 'false')</l>
<l>dev_display (RegionAffineTrans)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: get width of the screw via region processing</c>
<c>* </c>
<l>closing_circle (RegionAffineTrans, RegionToProcess, 4.5)</l>
<l>dev_clear_window ()</l>
<l>disp_message (WindowID, 'Region (transformed)', 'window', 12, 12, 'black', 'false')</l>
<l>dev_display (RegionToProcess)</l>
<c>* </c>
<l>get_region_runs (RegionToProcess, RowRegionRuns, ColumnBegin, ColumnEnd)</l>
<l>NumberLines := |RowRegionRuns|</l>
<l>ColumnBeginSelected := ColumnBegin[90:NumberLines - 90]</l>
<l>ColumnEndSelected := ColumnEnd[90:NumberLines - 90]</l>
<l>Diameter := ColumnEndSelected - ColumnBeginSelected + 1</l>
<c>* </c>
<c>* statistics</c>
<l>meanDiameter := mean(Diameter)</l>
<l>minDiameter := min(Diameter)</l>
<l>maxDiameter := max(Diameter)</l>
<c>* </c>
<c>* visualization</c>
<l>dev_set_color ('white')</l>
<l>gen_region_line (ScanLine1, RowRegionRuns[90], ColumnBegin[90], RowRegionRuns[90], ColumnEnd[90])</l>
<l>gen_region_line (ScanLine2, RowRegionRuns[NumberLines - 90], ColumnBegin[NumberLines - 90], RowRegionRuns[NumberLines - 90], ColumnEnd[NumberLines - 90])</l>
<l>dev_display (ScanLine1)</l>
<l>dev_display (ScanLine2)</l>
<l>disp_cross (WindowID, RowRegionRuns[90], ColumnBegin[90], 20, 0)</l>
<l>disp_cross (WindowID, RowRegionRuns[90], ColumnEnd[90], 20, 0)</l>
<l>disp_cross (WindowID, RowRegionRuns[NumberLines - 90], ColumnBegin[NumberLines - 90], 20, 0)</l>
<l>disp_cross (WindowID, RowRegionRuns[NumberLines - 90], ColumnEnd[NumberLines - 90], 20, 0)</l>
<l>disp_message (WindowID, 'Width of object', 'image', 10, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'per row (between ', 'image', 60, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'the white lines):', 'image', 110, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'mean width: ' + meanDiameter + ' pixels', 'image', 210, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'minimum width: ' + minDiameter + ' pixels', 'image', 260, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'maximum width: ' + maxDiameter + ' pixels', 'image', 310, 720, 'black', 'false')</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: get transformed contours and corresponding regression lines</c>
<c>* </c>
<c>* create ROI</c>
<l>boundary (Region, RegionBorder, 'inner_filled')</l>
<l>dilation_circle (RegionBorder, RegionDilation, 7.5)</l>
<l>reduce_domain (Image, RegionDilation, ImageReduced)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageReduced)</l>
<l>disp_message (WindowID, 'ROI for contour extraction', 'window', 12, 12, 'white', 'false')</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* extract contours and regression lines using Laplace</c>
<l>sigma := 3</l>
<l>derivate_gauss (ImageReduced, DerivGauss, sigma, 'laplace')</l>
<l>zero_crossing_sub_pix (DerivGauss, Edges)</l>
<l>select_contours_xld (Edges, SelectedEdges, 'contour_length', 3000, 99999, -0.5, 0.5)</l>
<l>affine_trans_contour_xld (SelectedEdges, ContoursAffineTrans, HomMat2DRotate)</l>
<l>smallest_rectangle1_xld (ContoursAffineTrans, Row11, Column11, Row21, Column21)</l>
<l>clip_contours_xld (ContoursAffineTrans, ClippedContours, Row11 + 90, 0, Row21 - 90, Width)</l>
<l>fit_line_contour_xld (ClippedContours, 'regression', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist1)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ClippedContours)</l>
<l>disp_message (WindowID, 'Contours (transformed and clipped)', 'window', 12, 12, 'black', 'false')</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: get deviations of the contours from the regression lines</c>
<c>* </c>
<l>gen_contour_polygon_xld (RegressContour0, [RowBegin[0],RowEnd[0]], [ColBegin[0],ColEnd[0]])</l>
<l>select_obj (ClippedContours, EdgeContour0, 1)</l>
<l>get_contour_xld (EdgeContour0, RowEdge0, ColEdge0)</l>
<l>distance_pc (RegressContour0, RowEdge0, ColEdge0, DistanceMin0, DistanceMax0)</l>
<l>minDistance0 := min(DistanceMin0)</l>
<l>maxDistance0 := max(DistanceMin0)</l>
<l>meanDistance0 := mean(DistanceMin0)</l>
<c>* </c>
<l>gen_contour_polygon_xld (RegressContour1, [RowBegin[1],RowEnd[1]], [ColBegin[1],ColEnd[1]])</l>
<l>select_obj (ClippedContours, EdgeContour1, 2)</l>
<l>get_contour_xld (EdgeContour1, RowEdge1, ColEdge1)</l>
<l>distance_pc (RegressContour1, RowEdge1, ColEdge1, DistanceMin1, DistanceMax1)</l>
<l>minDistance1 := min(DistanceMin1)</l>
<l>maxDistance1 := max(DistanceMin1)</l>
<l>meanDistance1 := mean(DistanceMin1)</l>
<l>dev_clear_window ()</l>
<c>* </c>
<c>* numerical visualization</c>
<l>dev_set_color ('gray')</l>
<l>dev_display (EdgeContour0)</l>
<l>dev_display (EdgeContour1)</l>
<l>dev_set_color ('black')</l>
<l>disp_message (WindowID, 'Contours (transformed and clipped)', 'image', 10, 10, 'black', 'false')</l>
<l>dev_display (RegressContour0)</l>
<l>dev_display (RegressContour1)</l>
<l>disp_message (WindowID, 'Maximum distances', 'image', 10, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'between contours', 'image', 60, 720, 'black', 'false')</l>
<l>disp_message (WindowID, 'and regression lines:', 'image', 110, 720, 'black', 'false')</l>
<c>* </c>
<l>disp_message (WindowID, 'max (contour/edge 0): ', 'image', 210, 720, 'black', 'false')</l>
<l>disp_message (WindowID, maxDistance0$'.4' + ' pixels', 'image', 260, 720, 'black', 'false')</l>
<c>* </c>
<l>disp_message (WindowID, 'max (contour/edge 1): ', 'image', 360, 720, 'black', 'false')</l>
<l>disp_message (WindowID, maxDistance1$'.4' + ' pixels', 'image', 410, 720, 'black', 'false')</l>
<c>* </c>
<l>disp_message (WindowID, '0', 'image', max([RowBegin[0],RowEnd[0]]) + 20, ColEnd[0] - 9, 'black', 'false')</l>
<l>disp_message (WindowID, '1', 'image', max([RowBegin[1],RowEnd[1]]) + 20, ColEnd[1] - 9, 'black', 'false')</l>
<c>* </c>
<c>* graphical visualization in zoom window</c>
<l>dev_set_color ('white')</l>
<l>dev_set_draw ('margin')</l>
<l>gen_rectangle1 (Rectangle1, 500, 620, 550, 680)</l>
<l>dev_display (Rectangle1)</l>
<l>dev_open_window (0, Width / 2 + 2, 300, 300, 'light gray', WindowHandleZoom)</l>
<l>dev_set_part (500, 620, 550, 680)</l>
<l>dev_set_color ('black')</l>
<l>dev_display (EdgeContour0)</l>
<l>dev_display (RegressContour0)</l>
<l>get_contour_xld (RegressContour0, RowContour0, ColContour0)</l>
<l>for i := 800 to 950 by 1</l>
<l>    projection_pl (RowEdge0[i], ColEdge0[i], RowContour0[0], ColContour0[0], RowContour0[1], ColContour0[1], RowProj0, ColProj0)</l>
<l>    gen_contour_polygon_xld (Contour, [RowEdge0[i],RowProj0], [ColEdge0[i],ColProj0])</l>
<l>    dev_display (Contour)</l>
<l>endfor</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_close_window ()</l>
<l>dev_set_window (WindowID)</l>
<c>* </c>
<c>* step: get distance between the two regression lines</c>
<c>* </c>
<l>distance_pp (RowBegin[1], ColBegin[1], RowEnd[0], ColEnd[0], Distance1)</l>
<l>distance_pp (RowBegin[0], ColBegin[0], RowEnd[1], ColEnd[1], Distance2)</l>
<l>if (abs(Distance1 - Distance2) &lt; 1)</l>
<c>    * </c>
<c>    * visualization</c>
<l>    dev_clear_window ()</l>
<l>    dev_set_color ('gray')</l>
<l>    dev_display (EdgeContour0)</l>
<l>    dev_display (EdgeContour1)</l>
<l>    dev_set_color ('black')</l>
<l>    disp_message (WindowID, 'Contours (transformed and clipped)', 'window', 12, 12, 'black', 'false')</l>
<l>    dev_display (RegressContour0)</l>
<l>    dev_display (RegressContour1)</l>
<l>    disp_message (WindowID, 'Mean distance', 'image', 10, 720, 'black', 'false')</l>
<l>    disp_message (WindowID, 'between regression', 'image', 60, 720, 'black', 'false')</l>
<l>    disp_message (WindowID, 'lines:', 'image', 110, 720, 'black', 'false')</l>
<l>    disp_message (WindowID, ((Distance1 + Distance2) / 2)$'.4' + ' pixels', 'image', 210, 720, 'black', 'false')</l>
<l>    dev_set_draw ('fill')</l>
<l>    dev_set_color ('white')</l>
<l>    disp_arrow (WindowID, RowEnd[1] + 100, ColEnd[1], RowBegin[0] + 100, ColBegin[0], 2)</l>
<l>    disp_arrow (WindowID, RowBegin[0] + 100, ColBegin[0], RowEnd[1] + 100, ColEnd[1], 2)</l>
<l>else</l>
<l>    dev_set_color ('black')</l>
<l>    disp_message (WindowID, 'Contours (transformed and clipped)', 'window', 12, 12, 'black', 'false')</l>
<l>    dev_display (RegressContour0)</l>
<l>    dev_display (RegressContour1)</l>
<l>    disp_message (WindowID, 'RegressContours', 'image', 10, 720, 'black', 'false')</l>
<l>    disp_message (WindowID, 'are not parallel', 'image', 60, 720, 'black', 'false')</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
