<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example demonstrates a completeness check of colored game</c>
<c>* pieces using MLP classification. The training and application</c>
<c>* of the classifier is first shown on colored images and then on</c>
<c>* gray images.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 557, 416, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<c>* </c>
<c>* Initialization</c>
<l>ImageRootName := 'color/color_pieces_0'</l>
<l>Regions := ['yellow','pink','blue','background']</l>
<l>Highlight := ['goldenrod','magenta','cyan']</l>
<l>gen_empty_obj (Classes)</l>
<c>* </c>
<c>* Train and apply the MLP classifier</c>
<l>for Mode := 0 to 1 by 1</l>
<l>    dev_set_color ('black')</l>
<l>    read_image (Image, ImageRootName + '0')</l>
<c>    * </c>
<c>    * Simulate gray image</c>
<l>    if (Mode == 1)</l>
<l>        rgb1_to_gray (Image, GrayImage)</l>
<l>        compose3 (GrayImage, GrayImage, GrayImage, Image)</l>
<l>        dev_display (Image)</l>
<l>        disp_message (WindowHandle, 'Train and apply the classes again on gray images', 'window', 12, 12, 'black', 'false')</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<c>    * </c>
<c>    * Colored images</c>
<l>    if (Mode == 0)</l>
<c>        * </c>
<c>        * Specify color classes</c>
<l>        for I := 1 to 4 by 1</l>
<l>            dev_display (Image)</l>
<l>            dev_display (Classes)</l>
<l>            disp_message (WindowHandle, ['Drag rectangle inside ' + Regions[I - 1] + ' color','Click right mouse button to confirm'], 'window', 24, 12, 'black', 'false')</l>
<l>            draw_rectangle1 (WindowHandle, Row1, Column1, Row2, Column2)</l>
<l>            gen_rectangle1 (Rectangle, Row1, Column1, Row2, Column2)</l>
<l>            concat_obj (Classes, Rectangle, Classes)</l>
<l>        endfor</l>
<l>    endif</l>
<c>    * </c>
<c>    * Train the specified color classes</c>
<l>    create_class_mlp (3, 7, 4, 'softmax', 'normalization', 3, 42, MLPHandle)</l>
<l>    add_samples_image_class_mlp (Image, Classes, MLPHandle)</l>
<l>    disp_message (WindowHandle, 'Training...', 'window', 100, 12, 'black', 'false')</l>
<l>    train_class_mlp (MLPHandle, 400, 0.5, 0.01, Error, ErrorLog)</l>
<c>    * </c>
<c>    * Use the trained MLP classifier to test if each image</c>
<c>    * contains four game pieces of each color</c>
<l>    for J := 0 to 3 by 1</l>
<l>        read_image (Image, ImageRootName + J)</l>
<l>        if (Mode == 1)</l>
<l>            rgb1_to_gray (Image, GrayImage)</l>
<l>            compose3 (GrayImage, GrayImage, GrayImage, Image)</l>
<l>        endif</l>
<c>        * </c>
<c>        * Apply the trained classes</c>
<l>        classify_image_class_mlp (Image, ClassRegions, MLPHandle, 0.5)</l>
<l>        dev_display (Image)</l>
<l>        disp_message (WindowHandle, 'Looking for 4 game pieces of each color ...', 'window', 24, 12, 'black', 'false')</l>
<l>        dev_set_line_width (2)</l>
<c>        * </c>
<c>        * Count the number of game pieces for each color class</c>
<l>        for Figure := 1 to 3 by 1</l>
<l>            copy_obj (ClassRegions, ObjectsSelected, Figure, 1)</l>
<l>            connection (ObjectsSelected, ConnectedRegions)</l>
<l>            select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 400, 99999)</l>
<l>            count_obj (SelectedRegions, Number)</l>
<l>            dev_set_color (Highlight[Figure - 1])</l>
<l>            dev_display (SelectedRegions)</l>
<l>            OutString := Regions[Figure - 1] + ': ' + Number + '   '</l>
<l>            dev_set_color ('green')</l>
<l>            disp_message (WindowHandle, OutString, 'window', 24 + 30 * Figure, 12, 'black', 'false')</l>
<l>            if (Number != 4)</l>
<l>                disp_message (WindowHandle, 'Not OK', 'window', 24 + 30 * Figure, 120, 'red', 'false')</l>
<l>            else</l>
<l>                disp_message (WindowHandle, 'OK', 'window', 24 + 30 * Figure, 120, 'green', 'false')</l>
<l>            endif</l>
<l>        endfor</l>
<l>        if (J &lt; 3 or Mode == 0)</l>
<l>            disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>    endfor</l>
<l>    clear_class_mlp (MLPHandle)</l>
<l>endfor</l>
<l>dev_clear_window ()</l>
<l>dev_display (Image)</l>
<l>Message := 'The game pieces cannot be classified reliable on'</l>
<l>Message[1] := 'gray images because the gray values of the'</l>
<l>Message[2] := 'game pieces cannot always be distinguished from'</l>
<l>Message[3] := 'the gray values of the background.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
