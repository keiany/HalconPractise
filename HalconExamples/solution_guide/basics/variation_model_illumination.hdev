<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example demonstrates the print inspection using</c>
<c>* a variation model. The variation model is trained</c>
<c>* using a single model image. Before applying the print inspection,</c>
<c>* the images are scaled to the same gray value range like the model.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Read model image and init visualization</c>
<l>read_image (ModelImage, 'cap_illumination/cap_illumination_01')</l>
<l>get_image_size (ModelImage, Width, Height)</l>
<l>dev_open_window (0, 0, Width / 2, Height / 2, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Segment model region</c>
<l>dev_display (ModelImage)</l>
<l>get_model_region (ModelImage, RegionROI, ImageReduced)</l>
<l>area_center (RegionROI, Area, RowModel, ColumnModel)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('green')</l>
<l>dev_display (RegionROI)</l>
<c>* </c>
<c>* Create model for shape-based-matching</c>
<l>disp_message (WindowHandle, 'Model generation...', 'window', 12, 12, 'black', 'true')</l>
<l>create_scaled_shape_model (ImageReduced, 'auto', 0, rad(360), 'auto', 0.8, 1.2, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID)</l>
<l>get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c>* Transform model contours from the original position for visualization</c>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_translate (HomMat2DIdentity, RowModel, ColumnModel, HomMat2DTranslate)</l>
<l>affine_trans_contour_xld (ModelContours, ModelContoursAffineTrans, HomMat2DTranslate)</l>
<c>* </c>
<c>* Create variation model for print inspection</c>
<l>create_variation_model (Width, Height, 'byte', 'direct', VariationID)</l>
<c>* Generate variation image</c>
<l>sobel_amp (ModelImage, VarImage, 'sum_abs', 5)</l>
<l>prepare_direct_variation_model (ModelImage, VarImage, VariationID, [20,25], [1.6,1.6])</l>
<c>* </c>
<c>* Get gray value range of the variation model</c>
<l>get_grayval_range (ModelImage, RegionROI, RegionForeground, RegionBackground, BackgroundGVModel, ForegroundGVModel)</l>
<c>* </c>
<c>* Perform print inspection</c>
<l>for I := 1 to 9 by 1</l>
<l>    read_image (rImage, 'cap_illumination/cap_illumination_' + I$'.2')</l>
<l>    inspect_cap (rImage, RegionROI, WindowHandle, ModelID, VariationID, RowModel, ColumnModel, BackgroundGVModel, ForegroundGVModel)</l>
<l>    if (I &lt; 9)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<l>clear_shape_model (ModelID)</l>
<l>clear_variation_model (VariationID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="inspect_cap">
<interface>
<io>
<par name="rImage" base_type="iconic" dimension="0"/>
<par name="RegionROI" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="VariationID" base_type="ctrl" dimension="0"/>
<par name="RowModel" base_type="ctrl" dimension="0"/>
<par name="ColumnModel" base_type="ctrl" dimension="0"/>
<par name="BackgroundGVModel" base_type="ctrl" dimension="0"/>
<par name="ForegroundGVModel" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* Find shape model in the input image</c>
<l>count_seconds (StartSeconds)</l>
<l>find_scaled_shape_model (rImage, ModelID, 0, rad(360), 0.98, 1.02, 0.4, 1, 1, 'least_squares_high', [5,3], 0.9, Row, Column, Angle, Scale, Score)</l>
<l>count_seconds (EndSeconds)</l>
<l>TimeObjSearch := EndSeconds - StartSeconds</l>
<c>* </c>
<l>get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c>* </c>
<l>if (|Row| &gt; 0)</l>
<c>    * </c>
<c>    * Align the model region and the found label region</c>
<l>    vector_angle_to_rigid (Row[0], Column[0], Angle, RowModel[0], ColumnModel[0], 0, HomMat2DImage)</l>
<l>    affine_trans_image (rImage, ImageAffineTrans, HomMat2DImage, 'constant', 'false')</l>
<l>    get_grayval_range (ImageAffineTrans, RegionROI, RegionForegroundImage, RegionBackgroundImage, BackgroundImage, ForegroundImage)</l>
<c>    * </c>
<c>    * Scale image to the model's gray value range</c>
<l>    Mult := (ForegroundGVModel - BackgroundGVModel) / (ForegroundImage - BackgroundImage)</l>
<l>    Add := ForegroundGVModel - Mult * ForegroundImage</l>
<c>    * Transform the contours of the models for the visualization</c>
<l>    vector_angle_to_rigid (0, 0, 0, Row[0], Column[0], Angle, HomMat2DContour)</l>
<l>    affine_trans_contour_xld (ModelContours, ModelContoursTrans, HomMat2DContour)</l>
<l>    reduce_domain (ImageAffineTrans, RegionROI, ImageReduced)</l>
<l>    scale_image (ImageReduced, ImageScaled, Mult, Add)</l>
<c>    * </c>
<c>    * Print Inspection</c>
<l>    count_seconds (StartSeconds)</l>
<l>    compare_ext_variation_model (ImageScaled, RegionDiff, VariationID, 'light_dark')</l>
<l>    count_seconds (EndSeconds)</l>
<c>    * Analyze bright and dark defect regions</c>
<l>    dev_display (rImage)</l>
<l>    count_obj (RegionDiff, NumberRegionDiff)</l>
<l>    for i := 1 to NumberRegionDiff by 1</l>
<l>        select_obj (RegionDiff, RegionDiffSelected, i)</l>
<l>        opening_circle (RegionDiffSelected, RegionOpening, 2.5)</l>
<l>        connection (RegionOpening, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, DefectRegions, 'height', 'and', 20, 99999)</l>
<c>        * </c>
<c>        * Transform regions to the original position in the input image</c>
<l>        hom_mat2d_invert (HomMat2DImage, HomMat2DInvert)</l>
<l>        affine_trans_region (DefectRegions, DefectRegionsTrans, HomMat2DInvert, 'nearest_neighbor')</l>
<l>        closing_circle (DefectRegionsTrans, DefectRegionsClosing, 1.5)</l>
<c>        * </c>
<c>        * Display bright and dark defects using different colors</c>
<l>        dev_set_line_width (2)</l>
<l>        dev_set_draw ('fill')</l>
<l>        if (i == 1)</l>
<l>            dev_set_color ('red')</l>
<l>        else</l>
<l>            dev_set_color ('orange')</l>
<l>        endif</l>
<l>        dev_display (DefectRegionsClosing)</l>
<c>        * </c>
<c>        * Emphasize defect regions</c>
<l>        dev_set_color ('magenta')</l>
<l>        dev_set_draw ('margin')</l>
<l>        union1 (DefectRegionsClosing, RegionUnion)</l>
<l>        closing_circle (RegionUnion, RegionClosing, 10)</l>
<l>        connection (RegionClosing, DefectRegionEnlarged)</l>
<l>        elliptic_axis (DefectRegionEnlarged, Ra, Rb, Phi)</l>
<l>        if (|Phi|)</l>
<l>            area_center (DefectRegionEnlarged, Area, RowEllipse, ColumnEllipse)</l>
<l>            gen_ellipse (Ellipse, RowEllipse, ColumnEllipse, Phi, Ra * 2, Rb * 2)</l>
<l>            dev_display (Ellipse)</l>
<l>        endif</l>
<l>    endfor</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (ModelContoursTrans)</l>
<c>    * </c>
<l>    TimePrintInspect := EndSeconds - StartSeconds</l>
<l>    disp_message (WindowHandle, 'Inspection Time: ' + ((TimeObjSearch + TimePrintInspect) * 1000.0)$'.04' + ' ms', 'window', 12, 12, 'black', 'true')</l>
<l>else</l>
<l>    disp_message (WindowHandle, 'No shape model found.', 'window', 12, 12, 'red', 'true')</l>
<l>endif</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="inspect_cap">
<chapters lang="en_US">
<item>demo_frame</item>
</chapters>
<parameters>
<parameter id="BackgroundGVModel"/>
<parameter id="ColumnModel"/>
<parameter id="ForegroundGVModel"/>
<parameter id="ModelID"/>
<parameter id="RegionROI"/>
<parameter id="RowModel"/>
<parameter id="VariationID"/>
<parameter id="WindowHandle"/>
<parameter id="rImage"/>
</parameters>
</docu>
</procedure>
<procedure name="get_grayval_range">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="RegionROI" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="RegionForeground" base_type="iconic" dimension="0"/>
<par name="RegionBackground" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="BackgroundGVal" base_type="ctrl" dimension="0"/>
<par name="ForegroundGVal" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>reduce_domain (Image, RegionROI, ImageReduced)</l>
<l>binary_threshold (ImageReduced, RegionBackground, 'max_separability', 'dark', UsedThreshold)</l>
<l>difference (RegionROI, RegionBackground, RegionForeground)</l>
<l>intensity (RegionForeground, Image, ForegroundGVal, DeviationFG)</l>
<l>intensity (RegionBackground, Image, BackgroundGVal, DeviationBG)</l>
<l>return ()</l>
</body>
<docu id="get_grayval_range">
<parameters>
<parameter id="BackgroundGVal"/>
<parameter id="ForegroundGVal"/>
<parameter id="Image"/>
<parameter id="RegionBackground"/>
<parameter id="RegionForeground"/>
<parameter id="RegionROI"/>
</parameters>
</docu>
</procedure>
<procedure name="get_model_region">
<interface>
<io>
<par name="rImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="RegionROI" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c>* </c>
<c>* Segment label on the cap</c>
<l>binary_threshold (rImage, BrightRegion, 'max_separability', 'light', UsedThreshold)</l>
<l>dilation_circle (BrightRegion, RegionDilation, 1.5)</l>
<l>connection (RegionDilation, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 100, 99999)</l>
<l>union1 (SelectedRegions, LabelRegion)</l>
<l>smallest_circle (LabelRegion, Row, Column, Radius)</l>
<l>smallest_rectangle1 (LabelRegion, Row1, Column1, Row2, Column2)</l>
<c>* </c>
<c>* Define model region</c>
<l>gen_circle (Region, Row, Column, Radius)</l>
<l>gen_rectangle1 (LabelRectangle, Row1, Column1, Row2, Column2)</l>
<l>intersection (Region, LabelRectangle, RegionIntersection)</l>
<l>dilation_circle (RegionIntersection, RegionROI, 5.5)</l>
<l>reduce_domain (rImage, RegionROI, ImageReduced)</l>
<l>return ()</l>
</body>
<docu id="get_model_region">
<parameters>
<parameter id="ImageReduced"/>
<parameter id="RegionROI"/>
<parameter id="rImage"/>
</parameters>
</docu>
</procedure>
</hdevelop>
