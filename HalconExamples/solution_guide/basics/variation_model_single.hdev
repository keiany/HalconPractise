<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* This example shows how to employ the new extensions of HALCON's variation model operators</c>
<c>* to perform customary print quality tests.</c>
<c>* In this example the variation model is built upon a single reference image.</c>
<c>* The example consists of three steps:</c>
<c>* 1. align the print objects similar to the reference image using a shape-based model</c>
<c>* 2. define the variation image by smoothing the object's contours</c>
<c>* 3. create the variation model</c>
<c>* Whether a print is labelled as OK or not, depends upon the size (area) of the difference to the reference image</c>
<c>* </c>
<l>dev_close_window ()</l>
<l>read_image (Image, 'pen/pen-01')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_update_off ()</l>
<l>set_display_font (WindowHandle, 12, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* segment the logo and create a shape model for the alignment</c>
<l>threshold (Image, Region, 125, 255)</l>
<l>fill_up (Region, RegionFillUp)</l>
<l>difference (RegionFillUp, Region, RegionDifference)</l>
<l>shape_trans (RegionDifference, LogoArea, 'convex')</l>
<l>dilation_circle (LogoArea, LogoArea, 7)</l>
<l>reduce_domain (Image, LogoArea, ImageReduced)</l>
<l>create_shape_model (ImageReduced, 'auto', -rad(10), rad(20), 'auto', 'auto', 'use_polarity', [40,50], 40, ShapeModelID)</l>
<l>area_center (LogoArea, Area, ModelRow, ModelColumn)</l>
<c>* </c>
<c>* define the variation image by smoothing the dilated regions obtained from the object's contours:</c>
<c>* Besides a binomial filter a neat trick is applied to get smoothly "polished" regions along the contours.</c>
<c>* In particular, the edges are enlarged and after their conversion into a dilated region the image</c>
<c>* is zoomed back to its original size using a weighting that smoothes the images further.</c>
<l>edges_sub_pix (ImageReduced, Edges, 'sobel_fast', 0.5, 10, 20)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_scale (HomMat2DIdentity, 4, 4, 0, 0, HomMat2DScale)</l>
<l>affine_trans_contour_xld (Edges, ZoomedEdges, HomMat2DScale)</l>
<l>gen_image_const (VarImageBig, 'byte', 4 * Width, 4 * Height)</l>
<l>count_obj (ZoomedEdges, NEdges)</l>
<l>for i := 1 to NEdges by 1</l>
<l>    select_obj (ZoomedEdges, ObjectSelected, i)</l>
<l>    get_contour_xld (ObjectSelected, RowEdge, ColEdge)</l>
<l>    gen_region_polygon (Region1, RowEdge, ColEdge)</l>
<l>    dilation_circle (Region1, RegionDilation, 2.5)</l>
<l>    paint_region (RegionDilation, VarImageBig, VarImageBig, 255, 'fill')</l>
<l>endfor</l>
<l>zoom_image_size (VarImageBig, VarImageSmall, Width, Height, 'weighted')</l>
<l>binomial_filter (VarImageSmall, VarImage, 3, 3)</l>
<l>create_variation_model (Width, Height, 'byte', 'direct', VarModelID)</l>
<l>prepare_direct_variation_model (Image, VarImage, VarModelID, 15, 4)</l>
<l>dev_display (VarImage)</l>
<l>disp_message (WindowHandle, 'Variation Image', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* print inspection</c>
<l>for i := 1 to 30 by 1</l>
<l>    read_image (Image, 'pen/pen-' + i$'02d')</l>
<c>    * locate the logo and align it to the reference image</c>
<l>    find_shape_model (Image, ShapeModelID, -rad(10), rad(20), 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>    if (|Score| != 0)</l>
<l>        vector_angle_to_rigid (Row, Column, Angle, ModelRow, ModelColumn, 0, HomMat2D)</l>
<l>        affine_trans_image (Image, ImageAffineTrans, HomMat2D, 'constant', 'false')</l>
<l>        reduce_domain (ImageAffineTrans, LogoArea, ImageReduced1)</l>
<l>        compare_ext_variation_model (ImageReduced1, RegionDiff, VarModelID, 'absolute')</l>
<l>        connection (RegionDiff, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 10, 99999)</l>
<c>        * </c>
<l>        dev_display (ImageAffineTrans)</l>
<l>        count_obj (SelectedRegions, NDefects)</l>
<l>        if (NDefects &gt; 0)</l>
<l>            dev_set_color ('red')</l>
<l>            dev_set_draw ('margin')</l>
<l>            dev_set_line_width (2)</l>
<l>            dev_display (SelectedRegions)</l>
<l>            dev_set_color ('green')</l>
<l>            dev_set_line_width (1)</l>
<l>            dev_display (Edges)</l>
<l>            disp_message (WindowHandle, 'Image check not OK', 'window', 12, 12, 'red', 'false')</l>
<l>        else</l>
<l>            disp_message (WindowHandle, 'Image check OK', 'window', 12, 12, 'green', 'false')</l>
<l>        endif</l>
<l>    endif</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* clean up</c>
<l>clear_shape_model (ShapeModelID)</l>
<l>clear_variation_model (VarModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
