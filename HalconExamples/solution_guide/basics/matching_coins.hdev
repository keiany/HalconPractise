<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* distinguishing of coins with the help of shape-based matching</c>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 652, 494, 'black', WindowHandle)</l>
<l>dev_update_window ('off')</l>
<l>Names := ['german','italian','greek','spanish']</l>
<l>Models := []</l>
<l>for i := 0 to 3 by 1</l>
<l>    read_image (Image, 'coins/20cent_' + Names[i])</l>
<l>    dev_display (Image)</l>
<l>    train_model (Image, ModelID)</l>
<l>    Models := [Models,ModelID]</l>
<l>endfor</l>
<l>for i := 1 to 13 by 1</l>
<l>    read_image (Image, 'coins/20cent_' + i$'.2' + '.png')</l>
<l>    find_coin (Image, Models, Row, Column, Angle, Score, ModelIdx)</l>
<l>    display_model (Image, Models[ModelIdx], Row, Column, Angle, Names[ModelIdx], WindowHandle)</l>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="train_model">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>locate_coin (Image, Coin)</l>
<l>Contrast := 20</l>
<l>HysteresisContrast := [Contrast / 2,Contrast + 6,10]</l>
<l>reduce_domain (Image, Coin, ImageReduced)</l>
<c>* Called during the test phase to see if Contrast is selected correctly</c>
<l>* inspect_shape_model (ImageReduced, ModelImages, ModelRegions, 1, HysteresisContrast)</l>
<l>create_shape_model (ImageReduced, 'auto', 0, rad(360), 'auto', 'none', 'ignore_local_polarity', HysteresisContrast, 5, ModelID)</l>
<l>return ()</l>
</body>
<docu id="train_model">
<parameters>
<parameter id="Image"/>
<parameter id="ModelID"/>
</parameters>
</docu>
</procedure>
<procedure name="locate_coin">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Coin" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>threshold (Image, Region, 70, 255)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 0)</l>
<l>shape_trans (SelectedRegions, RegionTrans, 'convex')</l>
<l>area_center (RegionTrans, Area, Row, Column)</l>
<l>gen_circle (Coin, Row, Column, 120)</l>
<l>return ()</l>
</body>
<docu id="locate_coin">
<parameters>
<parameter id="Coin"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
<procedure name="find_coin">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Models" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="Angle" base_type="ctrl" dimension="0"/>
<par name="Score" base_type="ctrl" dimension="0"/>
<par name="Model" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>locate_coin (Image, Coin)</l>
<l>area_center (Coin, Area, Row, Column)</l>
<l>gen_circle (Circle, Row, Column, 35)</l>
<l>reduce_domain (Image, Circle, ImageReduced)</l>
<l>find_shape_models (ImageReduced, Models, 0, rad(360), 0.6, 1, 0, 'least_squares', 0, 0.9, Row, Column, Angle, Score, Model)</l>
<l>return ()</l>
</body>
<docu id="find_coin">
<parameters>
<parameter id="Angle"/>
<parameter id="Column"/>
<parameter id="Image"/>
<parameter id="Model"/>
<parameter id="Models"/>
<parameter id="Row"/>
<parameter id="Score"/>
</parameters>
</docu>
</procedure>
<procedure name="display_model">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Model" base_type="ctrl" dimension="0"/>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="Angle" base_type="ctrl" dimension="0"/>
<par name="Name" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_shape_model_contours (ModelContours, Model, 1)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row, Column, Angle, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelContours, ContoursAffineTrans, HomMat2D)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (ContoursAffineTrans)</l>
<l>set_tposition (WindowHandle, 24, 12)</l>
<l>write_string (WindowHandle, Name)</l>
<l>return ()</l>
</body>
<docu id="display_model">
<parameters>
<parameter id="Angle"/>
<parameter id="Column"/>
<parameter id="Image"/>
<parameter id="Model"/>
<parameter id="Name"/>
<parameter id="Row"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
