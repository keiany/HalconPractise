<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to rectify an image based on the matching</c>
<c>* results. The task is to extract and rectify the serial number on CDs.</c>
<c>* The recitification and extraction is shown in two different ways.</c>
<c>* In the first approach the full search image is rectified and then</c>
<c>* the numbers are extracted.</c>
<c>* In the second approach only the region of the numbers is rectified</c>
<c>* before the numbers are extracted.</c>
<c>* </c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Read the model image and set visualization settings</c>
<l>read_image (ModelImage, 'cd_cover/cd_cover_01.png')</l>
<l>get_image_size (ModelImage, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (ModelImage)</l>
<l>disp_message (WindowHandle, 'Model image', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Define the ROIs</c>
<c>* ---------------</c>
<c>* Select the ROI of the model object</c>
<l>Row1 := 96</l>
<l>Row2 := 149</l>
<l>Column1 := 87</l>
<l>Column2 := 179</l>
<l>gen_rectangle1 (ModelROI, Row1, Column1, Row2, Column2)</l>
<l>area_center (ModelROI, Area, CenterModelROIRow, CenterModelROIColumn)</l>
<l>dev_set_color ('blue')</l>
<l>dev_display (ModelROI)</l>
<l>disp_message (WindowHandle, 'ROI of the model', 'window', 40, 12, 'blue', 'true')</l>
<c>* </c>
<c>* Define the ROI of the numbers relative to the model object</c>
<l>gen_rectangle1 (NumberROI, Row2, Column1, Row2 + 30, Column2)</l>
<l>dev_set_color ('magenta')</l>
<l>dev_display (NumberROI)</l>
<l>disp_message (WindowHandle, 'ROI of the numbers', 'window', 60, 12, 'magenta', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Create the shape model</c>
<c>* -----------------------------------------------</c>
<l>reduce_domain (ModelImage, ModelROI, ImageReduced)</l>
<l>create_shape_model (ImageReduced, 4, 0, rad(360), 'auto', 'none', 'use_polarity', 30, 10, ModelID)</l>
<l>inspect_shape_model (ImageReduced, ShapeModelImage, ShapeModelRegion, 1, 50)</l>
<l>get_shape_model_contours (ShapeModel, ModelID, 1)</l>
<c>* </c>
<c>* Display the model contours</c>
<l>dev_set_color ('blue')</l>
<l>dev_set_line_width (1)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (ShapeModelRegion)</l>
<l>disp_message (WindowHandle, 'Model image', 'window', 12, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, 'Shape model', 'window', 40, 12, 'blue', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Display description</c>
<l>dev_clear_window ()</l>
<l>Message := 'The shape model has been successfully created.'</l>
<l>Message[1] := 'In the next step each image is searched for the'</l>
<l>Message[2] := 'best match of the shape model followed by a'</l>
<l>Message[3] := 'rectification based on the matching results'</l>
<l>Message[4] := 'and the extraction of the numbers.'</l>
<l>Message[5] := ' '</l>
<l>Message[6] := 'The rectification is demonstrated in two'</l>
<l>Message[7] := 'different ways:'</l>
<l>Message[8] := '- rectification of the full search image'</l>
<l>Message[9] := '- rectification of only the ROI of the numbers'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Find the object in each image and rectify the results</c>
<l>ImageFiles := 'cd_cover/cd_cover_'</l>
<l>for I := 1 to 4 by 1</l>
<l>    dev_set_line_width (1)</l>
<c>    * </c>
<c>    * Read the search image and search the best</c>
<c>    * match of the shape model in the search image</c>
<l>    read_image (SearchImage, ImageFiles + I$'.2d')</l>
<l>    find_shape_model (SearchImage, ModelID, 0, rad(360), 0.7, 1, 0.5, 'least_squares', 0, 1, RowMatch, ColumnMatch, AngleMatch, Score)</l>
<c>    * </c>
<c>    * If a match was found, rectify the results</c>
<l>    if (|Score| &gt; 0)</l>
<c>        * </c>
<c>        * Compute two affine transformations based on the position</c>
<c>        * of the new match:</c>
<c>        * --------------------------------------------------------</c>
<c>        * 'MovementOfModel' for the shape model and</c>
<c>        * 'MovementOfObject' for the rectification of the numbers</c>
<l>        vector_angle_to_rigid (0, 0, 0, RowMatch, ColumnMatch, AngleMatch, MovementOfModel)</l>
<l>        vector_angle_to_rigid (CenterModelROIRow, CenterModelROIColumn, 0, RowMatch, ColumnMatch, AngleMatch, MovementOfObject)</l>
<c>        * </c>
<c>        * Apply both affine transformations:</c>
<c>        * --------------------------------------------------------</c>
<c>        * one to the XLD contours of the shape model and</c>
<c>        * one to the ROI of the numbers</c>
<l>        affine_trans_contour_xld (ShapeModel, ModelAtNewPosition, MovementOfModel)</l>
<l>        affine_trans_region (NumberROI, NumberROIAtNewPosition, MovementOfObject, 'nearest_neighbor')</l>
<c>        * </c>
<c>        * Display the model ROI and the ROI of the numbers at the (new)</c>
<c>        * position in which the match was found in the current search image</c>
<l>        dev_display (SearchImage)</l>
<l>        dev_set_color ('blue')</l>
<l>        dev_display (ModelAtNewPosition)</l>
<l>        dev_set_color ('magenta')</l>
<l>        dev_set_line_width (2)</l>
<l>        dev_display (NumberROIAtNewPosition)</l>
<l>        disp_message (WindowHandle, 'Search image ' + I, 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'Found match', 'window', 40, 12, 'blue', 'true')</l>
<l>        disp_message (WindowHandle, 'ROI of the numbers', 'window', 60, 12, 'magenta', 'true')</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<c>        * </c>
<c>        * Approach 1: Rectification of the full search image</c>
<c>        * **********************************************************</c>
<c>        * First the full search image is rectified. Then the numbers</c>
<c>        * are extracted.</c>
<c>        * **********************************************************</c>
<c>        * </c>
<c>        * Step 1: Rectify search image</c>
<c>        * ----------------------------</c>
<c>        * Invert the transformation matrix 'MovementOfObject' computed</c>
<c>        * for the rectification of the numbers so it can be used for the</c>
<c>        * rectification of the full search image</c>
<l>        hom_mat2d_invert (MovementOfObject, InverseMovementOfObject)</l>
<l>        affine_trans_image (SearchImage, RectifiedSearchImage, InverseMovementOfObject, 'constant', 'false')</l>
<c>        * </c>
<c>        * Display the rectified search image and the ROI of the numbers</c>
<l>        dev_clear_window ()</l>
<l>        dev_display (RectifiedSearchImage)</l>
<l>        dev_display (NumberROI)</l>
<l>        disp_message (WindowHandle, '1. Approach: Rectified search image ' + I, 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'ROI of the numbers', 'window', 40, 12, 'magenta', 'true')</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<c>        * </c>
<c>        * Step 2: Extract the numbers</c>
<c>        * ---------------------------</c>
<c>        * Reduce the domain of the rectified image to the region of the</c>
<c>        * numbers and extract the numbers using a global gray value treshold</c>
<l>        reduce_domain (RectifiedSearchImage, NumberROI, RectifiedNumberROIImage)</l>
<l>        threshold (RectifiedNumberROIImage, Numbers, 0, 128)</l>
<l>        connection (Numbers, IndividualNumbers)</l>
<c>        * </c>
<c>        * Display the extracted numbers in the reduced rectified image</c>
<l>        dev_set_colored (12)</l>
<l>        dev_set_draw ('fill')</l>
<l>        dev_display (IndividualNumbers)</l>
<l>        disp_message (WindowHandle, 'Extracted numbers', 'window', CenterModelROIRow, Column1 - 50, 'black', 'true')</l>
<l>        stop ()</l>
<c>        * </c>
<c>        * Approach 2: Rectify only the number ROI</c>
<c>        * ***********************************************************</c>
<c>        * In this approach the search image is first cropped to the</c>
<c>        * region of the numbers. The new cropped search image is then</c>
<c>        * rectified and the numbers are extracted.</c>
<c>        * ***********************************************************</c>
<c>        * </c>
<c>        * Display the original search image (no rectification) and</c>
<c>        * the corresponding ROI of the numbers</c>
<l>        dev_set_draw ('margin')</l>
<l>        dev_set_color ('magenta')</l>
<l>        dev_display (SearchImage)</l>
<l>        dev_display (NumberROIAtNewPosition)</l>
<c>        * </c>
<c>        * Step 1: Crop the search image</c>
<c>        * -----------------------------</c>
<c>        * Compute the smallest rectangle surrounding the ROI</c>
<c>        * of the numbers parallel to the coordinate axes</c>
<l>        smallest_rectangle1 (NumberROIAtNewPosition, RowRect1, ColumnRect1, RowRect2, ColumnRect2)</l>
<l>        dev_set_color ('lime green')</l>
<l>        disp_rectangle1 (WindowHandle, RowRect1, ColumnRect1, RowRect2, ColumnRect2)</l>
<l>        disp_message (WindowHandle, '2. Approach: Crop search image ' + I, 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'ROI of the numbers', 'window', 40, 12, 'magenta', 'true')</l>
<c>        * </c>
<c>        * Crop the image to the determined rectangle around the numbers</c>
<l>        crop_rectangle1 (SearchImage, CroppedSearchImage, RowRect1, ColumnRect1, RowRect2, ColumnRect2)</l>
<c>        * </c>
<c>        * Open a new window displaying the cropped image of the numbers</c>
<l>        Width2 := ColumnRect2 - ColumnRect1 + 1</l>
<l>        Height2 := RowRect2 - RowRect1 + 1</l>
<l>        dev_open_window (0, Width + 10, Width2, Height2, 'black', CroppedWindowHandle)</l>
<l>        dev_set_part (0, 0, Height2 - 1, Width2 - 1)</l>
<l>        dev_display (CroppedSearchImage)</l>
<l>        disp_rectangle1 (CroppedWindowHandle, 0, 0, Height2, Width2)</l>
<c>        * </c>
<c>        * Display the corresponding message</c>
<l>        Message := 'Cropped image part'</l>
<l>        Message[1] := '(See also the upper right window)'</l>
<l>        disp_message (WindowHandle, Message, 'window', 65, 12, 'lime green', 'true')</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<c>        * </c>
<c>        * Step 2: Rectifiy the cropped search image</c>
<c>        * ------------------------------------------</c>
<c>        * Prepare the transformation matrix needed for the</c>
<c>        * rectification. Add the translation of the cropping to</c>
<c>        * the transformation matrix and then invert the matrix.</c>
<l>        hom_mat2d_translate (MovementOfObject, -RowRect1, -ColumnRect1, MoveAndCrop)</l>
<l>        hom_mat2d_invert (MoveAndCrop, InverseMoveAndCrop)</l>
<c>        * </c>
<c>        * Rectify the cropped search image using the</c>
<c>        * inverted transformation matrix</c>
<l>        affine_trans_image (CroppedSearchImage, RectifiedROIImage, InverseMoveAndCrop, 'constant', 'true')</l>
<c>        * </c>
<c>        * Display the rectified cropped search image in a new window</c>
<l>        get_image_size (RectifiedROIImage, Width3, Height3)</l>
<l>        dev_set_part (0, 0, Height3 - 1, Width3 - 1)</l>
<l>        dev_open_window (Height2 + 60, Width + 10, Width3, Height3, 'black', WindowHandle1)</l>
<l>        set_display_font (WindowHandle1, 11, 'mono', 'true', 'false')</l>
<l>        dev_clear_window ()</l>
<l>        dev_display (RectifiedROIImage)</l>
<l>        disp_message (WindowHandle1, 'Rectified cropped image', 'window', 5, 5, 'black', 'true')</l>
<l>        stop ()</l>
<c>        * </c>
<c>        * Step 3: Extract the numbers</c>
<c>        * ---------------------------</c>
<c>        * Reduce the domain of the rectified and cropped image to the region of</c>
<c>        * the numbers and extract the numbers using a global gray value treshold</c>
<l>        reduce_domain (RectifiedROIImage, NumberROI, RectifiedNumberROIImage)</l>
<l>        threshold (RectifiedNumberROIImage, Numbers, 0, 128)</l>
<l>        connection (Numbers, IndividualNumbers)</l>
<l>        dev_clear_window ()</l>
<l>        dev_display (RectifiedNumberROIImage)</l>
<l>        dev_set_colored (12)</l>
<l>        dev_set_draw ('fill')</l>
<l>        dev_display (IndividualNumbers)</l>
<l>        disp_message (WindowHandle1, 'Extracted numbers', 'window', 5, 5, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>    if (I &lt; 4)</l>
<l>        dev_set_window (CroppedWindowHandle)</l>
<l>        dev_close_window ()</l>
<l>        dev_set_window (WindowHandle1)</l>
<l>        dev_close_window ()</l>
<l>    endif</l>
<l>endfor</l>
<l>disp_end_of_program_message (WindowHandle, 'black', 'true')</l>
<c>* </c>
<c>* Clear the model</c>
<l>clear_shape_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
