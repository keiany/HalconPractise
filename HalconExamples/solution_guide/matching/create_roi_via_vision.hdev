<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* ------------------------------------------------------------------------------------------------</c>
<c>* This example program creates a model ROI via image processing.</c>
<c>* ------------------------------------------------------------------------------------------------</c>
<c>* general configuration of HDevelop</c>
<l>dev_update_window ('off')</l>
<c>* image acquisition and window size</c>
<l>open_framegrabber ('File', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'pendulum/pendulum.seq', 'default', -1, 1, FGHandle)</l>
<l>grab_image (ModelImage, FGHandle)</l>
<l>get_image_pointer1 (ModelImage, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_display (ModelImage)</l>
<c>* colors and other settings for the visualization</c>
<l>dev_set_color ('cyan')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>stop ()</l>
<c>* -------------------  start of the application  ----------------</c>
<c>* step 1: extract the bright regions</c>
<l>threshold (ModelImage, BrightRegions, 200, 255)</l>
<l>connection (BrightRegions, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, FilledRegions)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (FilledRegions)</l>
<l>stop ()</l>
<c>* step 2: select the region of the card</c>
<l>select_shape (FilledRegions, Card, 'area', 'and', 1800, 1900)</l>
<l>dev_set_part (round(0.2 * Height), round(0.1 * Width) - 1, round(0.7 * Height) - 1, round(0.6 * Width) - 1)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (Card)</l>
<l>stop ()</l>
<c>* step 3: use the card as an ROI for the next steps</c>
<l>reduce_domain (ModelImage, Card, ImageCard)</l>
<l>stop ()</l>
<c>* step 4: extract the logo</c>
<l>dev_set_color ('blue')</l>
<l>threshold (ImageCard, DarkRegions, 0, 230)</l>
<l>connection (DarkRegions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, Characters, 'area', 'and', 150, 450)</l>
<l>union1 (Characters, CharacterRegion)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (CharacterRegion)</l>
<l>stop ()</l>
<c>* step 5: enlarge the region slightly</c>
<l>dilation_circle (CharacterRegion, ROI, 1.5)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (ROI)</l>
<l>stop ()</l>
<c>* step 6: creating the model</c>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_display (ModelImage)</l>
<l>reduce_domain (ModelImage, ROI, ImageROI)</l>
<l>inspect_shape_model (ImageROI, ShapeModelImages, ShapeModelRegions, 5, 25)</l>
<l>select_obj (ShapeModelRegions, ShapeModelRegion, 1)</l>
<l>dev_display (ShapeModelRegion)</l>
<l>create_shape_model (ImageROI, 3, 0, rad(360), 'auto', 'none', 'use_polarity', 30, 10, ModelID)</l>
<l>get_shape_model_contours (ShapeModel, ModelID, 1)</l>
<l>stop ()</l>
<c>* step 7: searching the logo</c>
<l>for i := 1 to 30 by 1</l>
<l>    grab_image (SearchImage, FGHandle)</l>
<l>    find_shape_model (SearchImage, ModelID, 0, rad(360), 0.7, 1, 0.5, 'least_squares', 0, 0.5, RowCheck, ColumnCheck, AngleCheck, Score)</l>
<l>    if (|Score| &gt; 0)</l>
<l>        vector_angle_to_rigid (0, 0, 0, RowCheck, ColumnCheck, AngleCheck, MovementOfObject)</l>
<l>        affine_trans_contour_xld (ShapeModel, ModelAtNewPosition, MovementOfObject)</l>
<l>        dev_display (SearchImage)</l>
<l>        dev_display (ModelAtNewPosition)</l>
<l>    endif</l>
<l>endfor</l>
<l>stop ()</l>
<c>* -------------------  end of the application  -----------------</c>
<c>* clean up</c>
<l>dev_update_window ('on')</l>
<l>clear_shape_model (ModelID)</l>
<l>close_framegrabber (FGHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
