<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to visualize a 3D feature space.</c>
<c>* For that, a texture image is created using Laws filters.</c>
<c>* The gray values of three channels of the texture image build the</c>
<c>* 3D feature space. This feature space is visualized for two</c>
<c>* regions that show different types of texture.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>set_system ('clip_region', 'false')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 720, 480, 'black', WindowHandle)</l>
<l>read_image (Image, 'combine')</l>
<l>dev_display (Image)</l>
<l>dev_set_line_width (4)</l>
<l>get_part (WindowHandle, Row1, Column1, Row2, Column2)</l>
<c>* </c>
<c>* Apply texture_laws with six different filter types</c>
<l>texture_laws (Image, ImageTexture1, 'ee', 5, 7)</l>
<l>texture_laws (Image, ImageTexture2, 'ss', 2, 7)</l>
<l>texture_laws (Image, ImageTexture3, 'rr', 0, 7)</l>
<l>texture_laws (Image, ImageTexture4, 'ww', 0, 7)</l>
<l>texture_laws (Image, ImageTexture5, 'le', 7, 7)</l>
<l>texture_laws (Image, ImageTexture6, 'el', 7, 7)</l>
<c>* </c>
<c>* Smooth the images</c>
<l>mean_image (ImageTexture1, ImageMean1, 41, 41)</l>
<l>mean_image (ImageTexture2, ImageMean2, 41, 41)</l>
<l>mean_image (ImageTexture3, ImageMean3, 41, 41)</l>
<l>mean_image (ImageTexture4, ImageMean4, 41, 41)</l>
<l>mean_image (ImageTexture5, ImageMean5, 41, 41)</l>
<l>mean_image (ImageTexture6, ImageMean6, 41, 41)</l>
<c>* </c>
<c>* Compose the six images into a multi-channel texture image</c>
<l>compose6 (ImageMean1, ImageMean2, ImageMean3, ImageMean4, ImageMean5, ImageMean6, TextureImage)</l>
<c>* </c>
<c>* Get the principal components of the texture image</c>
<c>* so that the most important information of the image is</c>
<c>* contained in the first three channels</c>
<l>principal_comp (TextureImage, PCAImage, InfoPerComp)</l>
<c>* </c>
<c>* Generate the ROIs for the two texture classes and get the gray</c>
<c>* values within these regions for the first three image channels</c>
<l>dev_update_window ('off')</l>
<l>gen_sample_tuples (PCAImage, Rectangles, Sample1, Sample2, Sample3)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_colored (3)</l>
<l>dev_display (Rectangles)</l>
<l>disp_message (WindowHandle, 'Two Texture Classes', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_set_draw ('fill')</l>
<l>dev_set_color ('white')</l>
<c>* </c>
<c>* Visualize the 3D feature space under rotation</c>
<l>set_window_param (WindowHandle, 'flush', 'false')</l>
<l>for i := 1 to 10 by 1</l>
<l>    for j := 0 to 360 by 1</l>
<l>        dev_set_check ('~give_error')</l>
<l>        get_mposition (WindowHandle, Row, Column, Button)</l>
<l>        dev_set_check ('give_error')</l>
<l>        if (Button != [])</l>
<l>            RotX := fmod(Row,360)</l>
<l>            RotZ := fmod(Column,360)</l>
<l>        else</l>
<l>            RotX := 75</l>
<l>            RotZ := 45</l>
<l>        endif</l>
<l>        RotY := j</l>
<l>        visualize_3d (WindowHandle, Sample1, Sample2, Sample3, RotX, RotY, RotZ)</l>
<l>    endfor</l>
<l>endfor</l>
<l>dev_clear_window ()</l>
<l>set_window_param (WindowHandle, 'flush', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_sample_tuples">
<interface>
<io>
<par name="PCAImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Rectangles" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Sample1" base_type="ctrl" dimension="0"/>
<par name="Sample2" base_type="ctrl" dimension="0"/>
<par name="Sample3" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_empty_obj (ClassSamples)</l>
<l>Sample1 := []</l>
<l>Sample2 := []</l>
<l>Sample3 := []</l>
<l>gen_empty_obj (Rectangles)</l>
<l>access_channel (PCAImage, Image1, 1)</l>
<l>access_channel (PCAImage, Image2, 2)</l>
<l>access_channel (PCAImage, Image3, 3)</l>
<l>ClassNum := 0</l>
<l>I := 0</l>
<l>for Row := 80 to 340 by 260</l>
<l>    for Col := 40 to 460 by 460</l>
<l>        gen_rectangle1 (ClassSample, Row, Col, Row + 60, Col + 60)</l>
<l>        concat_obj (Rectangles, ClassSample, Rectangles)</l>
<l>        RowsSample := []</l>
<l>        ColsSample := []</l>
<l>        for RSample := Row to Row + 60 by 1</l>
<l>            for CSample := Col to Col + 60 by 1</l>
<l>                RowsSample := [RowsSample,RSample]</l>
<l>                ColsSample := [ColsSample,CSample]</l>
<l>            endfor</l>
<l>        endfor</l>
<l>        get_grayval (Image1, RowsSample, ColsSample, Grayvals1)</l>
<l>        get_grayval (Image2, RowsSample, ColsSample, Grayvals2)</l>
<l>        get_grayval (Image3, RowsSample, ColsSample, Grayvals3)</l>
<l>        Sample1 := [Grayvals1,Sample1]</l>
<l>        Sample2 := [Grayvals2,Sample2]</l>
<l>        Sample3 := [Grayvals3,Sample3]</l>
<l>    endfor</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="gen_sample_tuples">
<parameters>
<parameter id="PCAImage"/>
<parameter id="Rectangles"/>
<parameter id="Sample1"/>
<parameter id="Sample2"/>
<parameter id="Sample3"/>
</parameters>
</docu>
</procedure>
<procedure name="visualize_3d">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Sample1" base_type="ctrl" dimension="0"/>
<par name="Sample2" base_type="ctrl" dimension="0"/>
<par name="Sample3" base_type="ctrl" dimension="0"/>
<par name="RotX" base_type="ctrl" dimension="0"/>
<par name="RotY" base_type="ctrl" dimension="0"/>
<par name="RotZ" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Min1 := min(Sample1)</l>
<l>Max1 := max(Sample1)</l>
<l>Min2 := min(Sample2)</l>
<l>Max2 := max(Sample2)</l>
<l>Min3 := min(Sample3)</l>
<l>Max3 := max(Sample3)</l>
<l>MaxFeatureRange := max([Max1 - Min1,Max2 - Min2,Max3 - Min3])</l>
<l>Scale := 1. / MaxFeatureRange</l>
<c>* </c>
<c>* Distance to the camera so that all points fit into the window</c>
<l>DistZ := 7</l>
<c>* </c>
<c>* A homogeneous transformation matrix is created and</c>
<c>* a translation into the image center point is applied.</c>
<l>hom_mat3d_identity (HomMat3DIdentity)</l>
<l>hom_mat3d_translate (HomMat3DIdentity, -(Min1 + Max1) / 2, -(Min2 + Max2) / 2, -(Min3 + Max3) / 2 + DistZ, HomMat3DTranslate)</l>
<c>* </c>
<c>* A scaling and a rotation around three axes is applied.</c>
<l>hom_mat3d_scale (HomMat3DTranslate, Scale, Scale, Scale, 0, 0, DistZ, HomMat3DScale)</l>
<l>hom_mat3d_rotate (HomMat3DScale, rad(RotX), 'x', 0, 0, DistZ, HomMat3DRotateX)</l>
<l>hom_mat3d_rotate (HomMat3DRotateX, rad(RotY), 'y', 0, 0, DistZ, HomMat3DRotateY)</l>
<l>hom_mat3d_rotate (HomMat3DRotateY, rad(RotZ), 'z', 0, 0, DistZ, HomMat3DRotateZ)</l>
<c>* </c>
<c>* The points are transformed.</c>
<l>affine_trans_point_3d (HomMat3DRotateZ, Sample1, Sample2, Sample3, Qx, Qy, Qz)</l>
<c>* </c>
<c>* The camera parameters are defined.</c>
<l>gen_cam_par_area_scan_division (0.1, 0, 0.00005, 0.00005, 360, 240, 720, 480, CamParam)</l>
<c>* </c>
<c>* The 3D points are projected into the 2D image.</c>
<l>project_3d_point (Qx, Qy, Qz, CamParam, Row, Column)</l>
<l>gen_region_points (Region, Row, Column)</l>
<l>set_part (WindowHandle, 0, 0, 479, 719)</l>
<l>set_system ('flush_graphic', 'false')</l>
<l>clear_window (WindowHandle)</l>
<l>disp_message (WindowHandle, ['The feature space is rotated to enable an overall view','Drag mouse to further change the view on the feature space'], 'window', 12, 12, 'black', 'true')</l>
<l>disp_obj (Region, WindowHandle)</l>
<l>set_system ('flush_graphic', 'true')</l>
<l>disp_line (WindowHandle, -101, -101, -99, -99)</l>
<l>flush_buffer (WindowHandle)</l>
<l>return ()</l>
</body>
<docu id="visualize_3d">
<parameters>
<parameter id="RotX"/>
<parameter id="RotY"/>
<parameter id="RotZ"/>
<parameter id="Sample1"/>
<parameter id="Sample2"/>
<parameter id="Sample3"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
