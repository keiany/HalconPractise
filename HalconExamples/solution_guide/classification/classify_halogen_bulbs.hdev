<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This program uses an SVM classifier</c>
<c>* to detect bad halogen bulbs.</c>
<c>* </c>
<c>* The training images have to be stored in sub directories</c>
<c>* which are named after their class names.</c>
<c>* </c>
<c>* The procedure calculate_features may be edited to select different</c>
<c>* features for the classification (if the number of features is changed,</c>
<c>* you have to change the first parameter of create_class_svm as well)</c>
<c>* </c>
<l>get_system ('image_dir', HalconImages)</l>
<l>get_system ('operating_system', OS)</l>
<l>if (OS{0:2} == 'Win')</l>
<l>    tuple_split (HalconImages, ';', HalconImages)</l>
<l>else</l>
<l>    tuple_split (HalconImages, ':', HalconImages)</l>
<l>endif</l>
<l>ReadOK := false</l>
<l>for k := 0 to |HalconImages| - 1 by 1</l>
<l>    try</l>
<l>        read_image (Image, HalconImages[k] + '/halogen_bulb/halogen_bulb_01.png')</l>
<l>        ReadPath := HalconImages[k] + '/halogen_bulb/'</l>
<l>        ReadOK := true</l>
<l>        break</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<l>if (not ReadOK)</l>
<l>    disp_message (WindowHandle, 'Could not find the images in $HALCONIMAGES', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<l>read_image (Image, 'halogen_bulb/halogen_bulb_01.png')</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width / 2, Height / 2, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>ClassNames := ['good','bad','none']</l>
<l>Colors := ['forest green','red','red']</l>
<l>Nu := 0.05</l>
<l>KernelParam := 0.02</l>
<c>* </c>
<c>* Create an SVM classifier</c>
<l>create_class_svm (7, 'rbf', KernelParam, Nu, |ClassNames|, 'one-versus-one', 'principal_components', 5, SVMHandle)</l>
<c>* </c>
<c>* Add samples</c>
<l>add_samples_to_svm (ClassNames, SVMHandle, WindowHandle, ReadPath)</l>
<l>dev_clear_window ()</l>
<c>* </c>
<c>* Train the classifier</c>
<l>disp_message (WindowHandle, 'Training...', 'window', 12, 12, 'black', 'true')</l>
<l>train_class_svm (SVMHandle, 0.001, 'default')</l>
<l>disp_message (WindowHandle, 'Training completed', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Classify halogen bulbs</c>
<l>classify_regions_with_svm (SVMHandle, Colors, ClassNames, ReadPath)</l>
<c>* </c>
<c>* Clear the classifier from memory</c>
<l>clear_class_svm (SVMHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="calculate_features">
<interface>
<io>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Features" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>area_center (Region, Area, Row, Column)</l>
<l>compactness (Region, Compactness)</l>
<l>moments_region_central_invar (Region, PSI1, PSI2, PSI3, PSI4)</l>
<l>convexity (Region, Convexity)</l>
<l>Features := real([Area,Compactness,PSI1,PSI2,PSI3,PSI4,Convexity])</l>
<l>return ()</l>
</body>
<docu id="calculate_features">
<parameters>
<parameter id="Features"/>
<parameter id="Region"/>
</parameters>
</docu>
</procedure>
<procedure name="add_samples_to_svm">
<interface>
<ic>
<par name="ClassNames" base_type="ctrl" dimension="0"/>
<par name="SVMHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ReadPath" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>for ClassNumber := 0 to |ClassNames| - 1 by 1</l>
<l>    list_files (ReadPath + ClassNames[ClassNumber], 'files', Files)</l>
<l>    Selection := regexp_select(Files,'.*[.]png')</l>
<l>    for Index := 0 to |Selection| - 1 by 1</l>
<l>        read_image (Image, Selection[Index])</l>
<l>        dev_display (Image)</l>
<c>        * 'Add Samples...', -1</c>
<l>        threshold (Image, Region, 0, 40)</l>
<l>        calculate_features (Region, Features)</l>
<l>        add_sample_class_svm (SVMHandle, Features, ClassNumber)</l>
<l>    endfor</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="add_samples_to_svm">
<parameters>
<parameter id="ClassNames"/>
<parameter id="ReadPath"/>
<parameter id="SVMHandle"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="classify_regions_with_svm">
<interface>
<ic>
<par name="SVMHandle" base_type="ctrl" dimension="0"/>
<par name="Colors" base_type="ctrl" dimension="0"/>
<par name="ClassNames" base_type="ctrl" dimension="0"/>
<par name="ReadPath" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>list_files (ReadPath, ['files','recursive'], Files)</l>
<l>Selection := regexp_select(Files,'.*[.]png')</l>
<l>read_image (Image, Selection[0])</l>
<l>dev_close_window ()</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width / 2, Height / 2, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>for Index := 0 to |Selection| - 1 by 1</l>
<l>    read_image (Image, Selection[Index])</l>
<l>    threshold (Image, Region, 0, 40)</l>
<l>    calculate_features (Region, Features)</l>
<l>    classify_class_svm (SVMHandle, Features, 1, Class)</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color (Colors[Class])</l>
<l>    dev_display (Region)</l>
<l>    disp_message (WindowHandle, 'Classified as:' + ClassNames[Class], 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>dev_display (Image)</l>
<l>return ()</l>
</body>
<docu id="classify_regions_with_svm">
<parameters>
<parameter id="ClassNames"/>
<parameter id="Colors"/>
<parameter id="ReadPath"/>
<parameter id="SVMHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
