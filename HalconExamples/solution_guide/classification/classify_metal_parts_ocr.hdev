<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to segment</c>
<c>* general objects like metal parts using OCR</c>
<c>* </c>
<l>dev_update_pc ('off')</l>
<l>dev_update_window ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 640, 480, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_colored (6)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>* </c>
<c>* Create an MLP classifier</c>
<l>create_ocr_class_mlp (110, 110, 'constant', 'moments_central', ['circle','hexagon','polygon'], 10, 'normalization', 10, 42, OCRHandle)</l>
<c>* </c>
<c>* Add training samples to the classifier</c>
<l>FileNames := ['nuts_01','nuts_02','nuts_03','washers_01','washers_02','washers_03','retainers_01','retainers_02','retainers_03']</l>
<l>ClassNamesImage := ['hexagon','hexagon','hexagon','circle','circle','circle','polygon','polygon','polygon']</l>
<l>for J := 0 to |FileNames| - 1 by 1</l>
<l>    read_image (Image, 'rings/' + FileNames[J])</l>
<l>    dev_display (Image)</l>
<l>    dev_set_colored (6)</l>
<l>    segment (Image, Objects)</l>
<l>    dev_display (Objects)</l>
<l>    dev_set_color ('black')</l>
<l>    count_obj (Objects, NumberObjects)</l>
<l>    for k := 1 to NumberObjects by 1</l>
<l>        select_obj (Objects, ObjectSelected, k)</l>
<c>        * </c>
<c>        * Write the samples to a train file</c>
<l>        if (J == 0 and k == 1)</l>
<l>            write_ocr_trainf (ObjectSelected, Image, ClassNamesImage[J], 'train_metal_parts_ocr.trf')</l>
<l>        else</l>
<l>            append_ocr_trainf (ObjectSelected, Image, ClassNamesImage[J], 'train_metal_parts_ocr.trf')</l>
<l>        endif</l>
<l>    endfor</l>
<l>    disp_message (WindowHandle, 'Add Samples to Class ' + ClassNamesImage[J], 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Train the classifier with the training samples</c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('black')</l>
<l>disp_message (WindowHandle, 'Training...', 'window', 12, 12, 'black', 'true')</l>
<l>trainf_ocr_class_mlp (OCRHandle, 'train_metal_parts_ocr.trf', 200, 1, 0.01, Error1, ErrorLog1)</l>
<l>disp_message (WindowHandle, 'Training... completed', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Classify objects</c>
<l>dev_set_draw ('fill')</l>
<l>for J := 1 to 4 by 1</l>
<l>    read_image (Image, 'rings/mixed_' + J$'02d')</l>
<l>    dev_display (Image)</l>
<l>    disp_message (WindowHandle, 'Image' + J, 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>    dev_set_color ('black')</l>
<c>    * 'Classifiy Image'+J</c>
<l>    segment (Image, Objects)</l>
<l>    count_obj (Objects, NumberObjects)</l>
<l>    for k := 1 to NumberObjects by 1</l>
<l>        select_obj (Objects, ObjectSelected, k)</l>
<l>        do_ocr_single_class_mlp (ObjectSelected, Image, OCRHandle, 1, Class, Confidence)</l>
<l>        if (Class == 'circle')</l>
<l>            dev_set_color ('blue')</l>
<l>        endif</l>
<l>        if (Class == 'hexagon')</l>
<l>            dev_set_color ('coral')</l>
<l>        endif</l>
<l>        if (Class == 'polygon')</l>
<l>            dev_set_color ('green')</l>
<l>        endif</l>
<l>        dev_display (ObjectSelected)</l>
<l>    endfor</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Clear the classifier from memory</c>
<l>clear_ocr_class_mlp (OCRHandle)</l>
<l>dev_clear_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="segment">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, Regions)</l>
<l>return ()</l>
</body>
<docu id="segment">
<parameters>
<parameter id="Image"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
</hdevelop>
