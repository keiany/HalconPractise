<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to read the characters that</c>
<c>* were trained with the example program train_characters_ocr.hdev.</c>
<c>* Note that you have to run train_characters_ocr.hdev first.</c>
<c>* </c>
<l>read_image (Image, 'ocr/chars_01.png')</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'white', WindowHandle)</l>
<l>set_display_font (WindowHandle, 12, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (Image)</l>
<l>dev_update_off ()</l>
<c>* </c>
<c>* Check, if the SVM font file exists</c>
<l>file_exists ('font_characters_ocr.osc', FileExists)</l>
<l>if (FileExists)</l>
<c>    * </c>
<c>    * Read the SVM font file from file</c>
<l>    read_ocr_class_svm ('font_characters_ocr', OCRHandle)</l>
<c>    * </c>
<c>    * For each image, extract the regions of the characters</c>
<c>    * and read them using the trained OCR classifier</c>
<l>    for I := 1 to 3 by 1</l>
<l>        read_image (Image, 'ocr/chars_' + I$'.2d')</l>
<l>        dev_display (Image)</l>
<l>        get_regions (Image, SortedRegions)</l>
<l>        do_ocr_multi_class_svm (SortedRegions, Image, OCRHandle, Classes)</l>
<l>        area_center (SortedRegions, AreaCenter, Row, Column)</l>
<l>        dev_set_color ('gray')</l>
<l>        dev_display (SortedRegions)</l>
<l>        count_obj (SortedRegions, NumberObjects)</l>
<l>        disp_message (WindowHandle, Classes, 'window', Row - 100, Column, 'black', 'true')</l>
<l>        if (I &lt; 3)</l>
<l>            disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>    endfor</l>
<c>    * </c>
<c>    * Clear the classifier from memory</c>
<l>    clear_ocr_class_svm (OCRHandle)</l>
<l>else</l>
<l>    Message := 'Please, run train_characters_ocr.hdev first'</l>
<l>    Message[1] := 'to create the needed font!'</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'red', 'true')</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_regions">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="SortedRegions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>dev_set_color ('white')</l>
<l>threshold (Image, Region, 0, 125)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 50, 999999)</l>
<l>sort_region (SelectedRegions, SortedRegions, 'character', 'true', 'row')</l>
<l>return ()</l>
</body>
<docu id="get_regions">
<short lang="en_US">extract the regions of the citrus fruits</short>
<parameters>
<parameter id="Image"/>
<parameter id="SortedRegions"/>
</parameters>
</docu>
</procedure>
</hdevelop>
