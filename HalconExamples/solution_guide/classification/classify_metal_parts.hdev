<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to classify different</c>
<c>* metal parts using a general MLP classification</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 640, 480, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_colored (6)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>* </c>
<c>* Create an MLP classifier</c>
<l>create_class_mlp (6, 5, 3, 'softmax', 'normalization', 3, 42, MLPHandle)</l>
<c>* </c>
<c>* Add training samples to the classifier</c>
<l>FileNames := ['nuts_01','nuts_02','nuts_03','washers_01','washers_02','washers_03','retainers_01','retainers_02','retainers_03']</l>
<l>Classes := [0,0,0,1,1,1,2,2,2]</l>
<l>for J := 0 to |FileNames| - 1 by 1</l>
<l>    read_image (Image, 'rings/' + FileNames[J])</l>
<l>    dev_display (Image)</l>
<l>    dev_set_colored (6)</l>
<l>    segment (Image, Objects)</l>
<l>    dev_display (Objects)</l>
<l>    dev_set_color ('black')</l>
<l>    disp_message (WindowHandle, 'Add Sample ' + J + ', Class Index ' + Classes[J], 'window', 10, 10, 'black', 'true')</l>
<l>    add_samples (Objects, MLPHandle, Classes[J])</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Train the classifier with the training samples</c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('black')</l>
<l>disp_message (WindowHandle, 'Training...', 'window', 10, 10, 'black', 'true')</l>
<l>train_class_mlp (MLPHandle, 200, 1, 0.01, Error, ErrorLog)</l>
<l>clear_samples_class_mlp (MLPHandle)</l>
<l>disp_message (WindowHandle, 'Training... completed', 'window', 10, 10, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Classify objects</c>
<l>dev_set_draw ('fill')</l>
<l>for J := 1 to 4 by 1</l>
<l>    read_image (Image, 'rings/mixed_' + J$'02d')</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('black')</l>
<l>    dev_set_draw ('margin')</l>
<l>    disp_message (WindowHandle, 'Classifiy Image' + J, 'window', 10, 10, 'black', 'true')</l>
<l>    segment (Image, Objects)</l>
<l>    classify (Objects, MLPHandle, Classes)</l>
<l>    disp_obj_class (Objects, Classes)</l>
<l>    if (J &lt; 4)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<l>stop ()</l>
<c>* </c>
<c>* Clear the classifier from memory</c>
<l>clear_class_mlp (MLPHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="segment">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, Regions)</l>
<l>return ()</l>
</body>
<docu id="segment">
<parameters>
<parameter id="Image"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
<procedure name="add_samples">
<interface>
<io>
<par name="Regions" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MLPHandle" base_type="ctrl" dimension="0"/>
<par name="Class" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>count_obj (Regions, Number)</l>
<l>for J := 1 to Number by 1</l>
<l>    select_obj (Regions, Region, J)</l>
<l>    get_features (Region, Features)</l>
<l>    add_sample_class_mlp (MLPHandle, Features, Class)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="add_samples">
<parameters>
<parameter id="Class"/>
<parameter id="MLPHandle"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
<procedure name="get_features">
<interface>
<io>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Features" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>select_obj (Region, SingleRegion, 1)</l>
<l>circularity (SingleRegion, Circularity)</l>
<l>roundness (SingleRegion, Distance, Sigma, Roundness, Sides)</l>
<l>moments_region_central_invar (SingleRegion, PSI1, PSI2, PSI3, PSI4)</l>
<l>Features := [Circularity,Roundness,PSI1,PSI2,PSI3,PSI4]</l>
<l>return ()</l>
</body>
<docu id="get_features">
<parameters>
<parameter id="Features"/>
<parameter id="Region"/>
</parameters>
</docu>
</procedure>
<procedure name="classify">
<interface>
<io>
<par name="Regions" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MLPHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Classes" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>count_obj (Regions, Number)</l>
<l>Classes := []</l>
<l>for J := 1 to Number by 1</l>
<l>    select_obj (Regions, Region, J)</l>
<l>    get_features (Region, Features)</l>
<l>    classify_class_mlp (MLPHandle, Features, 1, Class, Confidence)</l>
<l>    Classes := [Classes,Class]</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="classify">
<parameters>
<parameter id="Classes"/>
<parameter id="MLPHandle"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
<procedure name="disp_obj_class">
<interface>
<io>
<par name="Regions" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Classes" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>count_obj (Regions, Number)</l>
<l>Colors := ['yellow','magenta','green']</l>
<l>for J := 1 to Number by 1</l>
<l>    select_obj (Regions, Region, J)</l>
<l>    dev_set_color (Colors[Classes[J - 1]])</l>
<l>    dev_display (Region)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="disp_obj_class">
<parameters>
<parameter id="Classes"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
</hdevelop>
