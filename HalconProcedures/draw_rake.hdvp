<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="-190868689">
<procedure name="draw_rake">
<interface>
<oo>
<par name="Regions"/>
</oo>
<ic>
<par name="WindowHandle"/>
<par name="Elements"/>
<par name="DetectHeight"/>
<par name="DetectWidth"/>
</ic>
<oc>
<par name="Row1"/>
<par name="Column1"/>
<par name="Row2"/>
<par name="Column2"/>
</oc>
</interface>
<body>
<l>disp_message (WindowHandle, '点击鼠标左键在对应边缘画一条直线,点击右键确认', 'window', 12, 12, 'red', 'false')</l>
<l>gen_empty_obj(Regions)</l>
<l>draw_line(WindowHandle, Row1, Column1, Row2, Column2)</l>
<l>* disp_line(WindowHandle, Row1, Column1, Row2, Column2)</l>
<l>gen_region_line(RegionLines, Row1, Column1, Row2, Column2)</l>
<l>concat_obj(Regions, RegionLines, Regions)</l>
<c>*atan2(y,x)所表达的意思是坐标原点为起点，指向(x,y)的射线在坐标平面上与x轴正方向之间的角的角度（-180到180），即等于直线的角度A</c>
<l>tuple_atan2 (-Row2+Row1, Column2-Column1, ATan)</l>
<l>*tuple_deg (ATan, Deg1)</l>
<c>* 将角度变成垂直于直线的角度</c>
<l>ATan:=ATan+rad(90)</l>
<c></c>
<l>tuple_deg (ATan, Deg)</l>
<c> </c>
<c></c>
<l>for i:=1 to Elements by 1</l>
<l>	RowC := Row1+(((Row2-Row1)*i)/(Elements+1))</l>
<l>	ColC := Column1+(Column2-Column1)*i/(Elements+1)</l>
<c></c>
<l>   if(Elements=1)</l>
<l>       distance_pp(Row1, Column1, Row2, Column2, Distance)</l>
<c>       *创建一个有一定角度的矩形轮廓</c>
<l>       gen_rectangle2_contour_xld(Rectangle, RowC, ColC, rad(Deg), DetectHeight/2,Distance/2)</l>
<l>   else</l>
<l> 	   gen_rectangle2_contour_xld(Rectangle, RowC, ColC, rad(Deg), DetectHeight/2,DetectWidth/2)</l>
<l>   endif</l>
<c></c>
<l>    concat_obj (Regions, Rectangle, Regions)</l>
<l>    if(i=1)</l>
<l>*     RowL2:=RowC+DetectHeight/2*sin(ATan)</l>
<l>*     RowL1:=RowC-DetectHeight/2*sin(ATan)</l>
<l>*     ColL2:=ColC-DetectHeight/2*cos(ATan)</l>
<l>*     ColL1:=ColC+DetectHeight/2*cos(ATan)</l>
<c>    </c>
<l>    RowL2:=RowC+DetectHeight/2*sin(-ATan)</l>
<l>    RowL1:=RowC-DetectHeight/2*sin(-ATan)</l>
<l>    ColL2:=ColC+DetectHeight/2*cos(-ATan)</l>
<l>    ColL1:=ColC-DetectHeight/2*cos(-ATan)</l>
<l>    gen_arrow_contour_xld (Arrow1, RowL1, ColL1, RowL2, ColL2, 25, 25)</l>
<l>    concat_obj (Regions, Arrow1, Regions)</l>
<l>    endif</l>
<l>endfor</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="draw_rake">
<parameters>
<parameter id="Column1">
<description lang="zh_CN">检测区域起点的x</description>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="Column2">
<description lang="zh_CN">检测区域终点的x</description>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="DetectHeight">
<default_value>60</default_value>
<description lang="zh_CN">检测边缘点的卡尺工具的高度</description>
<sem_type>integer</sem_type>
<values>
<item>30</item>
<item>60</item>
<item>90</item>
<item>120</item>
</values>
</parameter>
<parameter id="DetectWidth">
<default_value>15</default_value>
<description lang="zh_CN">检测边缘点的卡尺工具的宽度</description>
<sem_type>integer</sem_type>
<values>
<item>5</item>
<item>10</item>
<item>15</item>
<item>20</item>
<item>25</item>
<item>30</item>
<item>40</item>
</values>
</parameter>
<parameter id="Elements">
<default_value>30</default_value>
<description lang="zh_CN">检测边缘点数</description>
<sem_type>integer</sem_type>
<type_list>
<item>real</item>
</type_list>
<values>
<item>10</item>
<item>20</item>
<item>30</item>
<item>50</item>
<item>60</item>
</values>
</parameter>
<parameter id="Regions">
<description lang="zh_CN">输出边缘点检测区域及检测方向</description>
<sem_type>object</sem_type>
</parameter>
<parameter id="Row1">
<description lang="zh_CN">检测区域起点的y</description>
<mixed_type>false</mixed_type>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="Row2">
<description lang="zh_CN">检测区域终点的y</description>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="WindowHandle">
<description lang="zh_CN">图像串口句柄</description>
<mixed_type>false</mixed_type>
<sem_type>window</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
