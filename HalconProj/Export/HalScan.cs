//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  // External procedures 
  // Chapter: Develop
  // Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
  public void dev_update_off ()
  {

    // Initialize local and output iconic variables 
    //This procedure sets different update settings to 'off'.
    //This is useful to get the best performance and reduce overhead.
    //
    // dev_update_pc(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    // dev_update_window(...); only in hdevelop


    return;
  }

  public void image_cali_map (HObject ho_Image, out HObject ho_TmpObj_RectifiedImage, 
      HTuple hv_CameraParameters, HTuple hv_CameraPose)
  {




      // Local iconic variables 

      HObject ho_TmpObj_RectificationMap;

      // Local control variables 

      HTuple hv_TmpCtrl_RectificationWidth = new HTuple();
      HTuple hv_TmpCtrl_RectificationPose = new HTuple();
      HTuple   hv_CameraParameters_COPY_INP_TMP = new HTuple(hv_CameraParameters);
      HTuple   hv_CameraPose_COPY_INP_TMP = new HTuple(hv_CameraPose);

      // Initialize local and output iconic variables 
      HOperatorSet.GenEmptyObj(out ho_TmpObj_RectifiedImage);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_RectificationMap);
      try
      {



      //* GEN CALIDATA
      //Calibration 01: Code generated by Calibration 01
      if ((int)((new HTuple(hv_CameraParameters_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_CameraPose_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
      {
        hv_CameraParameters_COPY_INP_TMP.Dispose();
        hv_CameraParameters_COPY_INP_TMP = new HTuple();
        hv_CameraParameters_COPY_INP_TMP[0] = "area_scan_division";
        hv_CameraParameters_COPY_INP_TMP[1] = 0.0395393;
        hv_CameraParameters_COPY_INP_TMP[2] = 29.5225;
        hv_CameraParameters_COPY_INP_TMP[3] = 2.3103e-006;
        hv_CameraParameters_COPY_INP_TMP[4] = 2.4e-006;
        hv_CameraParameters_COPY_INP_TMP[5] = 1969.65;
        hv_CameraParameters_COPY_INP_TMP[6] = 5753.85;
        hv_CameraParameters_COPY_INP_TMP[7] = 4024;
        hv_CameraParameters_COPY_INP_TMP[8] = 3036;
        hv_CameraPose_COPY_INP_TMP.Dispose();
        hv_CameraPose_COPY_INP_TMP = new HTuple();
        hv_CameraPose_COPY_INP_TMP[0] = 0.00207285;
        hv_CameraPose_COPY_INP_TMP[1] = -0.111611;
        hv_CameraPose_COPY_INP_TMP[2] = 0.434522;
        hv_CameraPose_COPY_INP_TMP[3] = 13.3656;
        hv_CameraPose_COPY_INP_TMP[4] = 0.504334;
        hv_CameraPose_COPY_INP_TMP[5] = 90.2621;
        hv_CameraPose_COPY_INP_TMP[6] = 0;
      }




      //Calibration 01: Sample code generated by Calibration 01
      //Calibration 01: For demonstration purposes, we use the calibration
      //Calibration 01: plate itself as sample object.
      //Calibration 01: Therefore, we load the reference image
      //read_image (Image, 'C:/Users/iwake/OneDrive - wake/Desktop/HalconPractise/HalconProj/Cali/image_02.png')
      //Calibration 01: Extract plate data from the image
      //TmpCtrl_PlateDescription := 'C:/Program Files/MVTec/HALCON-18.11-Steady/calib/caltab_30mm.descr'
      //TmpCtrl_FindCalObjParNames := ['gap_tolerance','alpha','skip_find_caltab']
      //TmpCtrl_FindCalObjParValues := [1,1,'false']
      //Calibration 01: Create calibration model for managing calibration data
      //create_calib_data ('calibration_object', 1, 1, CalibHandle)
      //set_calib_data_cam_param (CalibHandle, 0, [], CameraParameters)
      //set_calib_data_calib_object (CalibHandle, 0, TmpCtrl_PlateDescription)
      //find_calib_object (Image, CalibHandle, 0, 0, 0, TmpCtrl_FindCalObjParNames, TmpCtrl_FindCalObjParValues)
      //get_calib_data_observ_points (CalibHandle, 0, 0, 0, TmpCtrl_MarkRows, TmpCtrl_MarkColumns, TmpCtrl_Ind, CameraPose)
      //Calibration 01: Using the calibration plate as test object, the marks actually
      //Calibration 01: lie above the corrected measurement plane. Therefore, we 'uncorrect'
      //Calibration 01: the plane of measurement by the plate thickness here.
      //set_origin_pose (CameraPose, 0.0, 0.0, 0, CameraPose)


      //read_image (Image, 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/InvV1 (4).jpg')
      //Calibration 01: **********************************************************
      //Calibration 01: Sample Task: Image Rectification
      //Calibration 01: **********************************************************
      //Calibration 01: Choose the desired width of the visible area in world coordinates [mm]
      hv_TmpCtrl_RectificationWidth.Dispose();
      hv_TmpCtrl_RectificationWidth = 75;
      //Calibration 01: Convert to [m]
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_TmpCtrl_RectificationWidth = hv_TmpCtrl_RectificationWidth/1000.0;
      hv_TmpCtrl_RectificationWidth.Dispose();
      hv_TmpCtrl_RectificationWidth = ExpTmpLocalVar_TmpCtrl_RectificationWidth;
      }
      }
      //Calibration 01: Adjust origin so the plate is roughly centered
      //* ATTENTION 参数从-0.5 -0.4 改成了-0.5 -0.6
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TmpCtrl_RectificationPose.Dispose();
      HOperatorSet.SetOriginPose(hv_CameraPose_COPY_INP_TMP, -0.5*hv_TmpCtrl_RectificationWidth, 
          -0.6*hv_TmpCtrl_RectificationWidth, 0, out hv_TmpCtrl_RectificationPose);
      }
      //Calibration 01: Generate the rectification map
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_TmpObj_RectificationMap.Dispose();
      HOperatorSet.GenImageToWorldPlaneMap(out ho_TmpObj_RectificationMap, hv_CameraParameters_COPY_INP_TMP, 
          hv_TmpCtrl_RectificationPose, 4024, 3036, 3036, 4024, hv_TmpCtrl_RectificationWidth/3036, 
          "bilinear");
      }
      //gen_image_to_world_plane_map (TmpObj_RectificationMap, CameraParameters, TmpCtrl_RectificationPose, 4024, 3036, 3036, 4024, 0.8*TmpCtrl_RectificationWidth / 3036, 'bilinear')
      //Calibration 01: Now, images can be rectified using the rectification map
      ho_TmpObj_RectifiedImage.Dispose();
      HOperatorSet.MapImage(ho_Image, ho_TmpObj_RectificationMap, out ho_TmpObj_RectifiedImage
          );
      //stop ()
      ho_TmpObj_RectificationMap.Dispose();

      hv_CameraParameters_COPY_INP_TMP.Dispose();
      hv_CameraPose_COPY_INP_TMP.Dispose();
      hv_TmpCtrl_RectificationWidth.Dispose();
      hv_TmpCtrl_RectificationPose.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TmpObj_RectificationMap.Dispose();

      hv_CameraParameters_COPY_INP_TMP.Dispose();
      hv_CameraPose_COPY_INP_TMP.Dispose();
      hv_TmpCtrl_RectificationWidth.Dispose();
      hv_TmpCtrl_RectificationPose.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void image_get_bar (HObject ho_Image, out HObject ho_SymbolRegions, HTuple hv_BarCodeHandle, 
      out HTuple hv_DecodedDataStrings, out HTuple hv_someitem)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_CodeTypes = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SymbolRegions);
    hv_DecodedDataStrings = new HTuple();
    hv_someitem = new HTuple();
    try
    {
      //
      //Use autodiscrimination to decode any of the bar code types
      //supported by HALCON (except PharmaCode) or determine the bar
      //code type of unknown bar codes
      //
      hv_CodeTypes.Dispose();
      hv_CodeTypes = "Code 128";

      //
      //Set display defaults
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


      //
      //Find and decode bar codes. Measure the time needed.
      ho_SymbolRegions.Dispose();hv_DecodedDataStrings.Dispose();
      HOperatorSet.FindBarCode(ho_Image, out ho_SymbolRegions, hv_BarCodeHandle, 
          hv_CodeTypes, out hv_DecodedDataStrings);
      //get_bar_code_result (BarCodeHandle, 'all', 'someitem', someitem)

      hv_CodeTypes.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_CodeTypes.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void ocr_split (HTuple hv_SymbolNames_OCR_01_0, out HTuple hv_Ocr)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    hv_Ocr = new HTuple();
    try
    {
      hv_Ocr.Dispose();
      hv_Ocr = "";
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_SymbolNames_OCR_01_0.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Ocr = hv_Ocr+(hv_SymbolNames_OCR_01_0.TupleSelect(
            hv_Index));
        hv_Ocr.Dispose();
        hv_Ocr = ExpTmpLocalVar_Ocr;
        }
        }
      }

      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void region_ocr_num_svm (HObject ho_Image, HObject ho_ROI_OCR_01_0, HTuple hv_TextModel, 
      HTuple hv_OcrHandle, out HTuple hv_SymbolNames_OCR_01_0, out HTuple hv_Ocr_Split)
  {




      // Local iconic variables 

      HObject ho_TmpObj_Mono, ho_TmpObj_MonoReduced_OCR_01_0;
      HObject ho_TmpObj_Domain, ho_TmpObj_DomainExpanded, ho_TmpObj_DomainTransformedRaw;
      HObject ho_TmpObj_DomainTransformed, ho_TmpObj_ImageTransformed;
      HObject ho_TmpObj_ImageTransformedExpanded, ho_TmpObj_ImageTransformedReduced;
      HObject ho_Symbols_OCR_01_0;

      // Local control variables 

      HTuple hv_TmpCtrl_MatrixIdentity = new HTuple();
      HTuple hv_TmpCtrl_ClipRegion = new HTuple(), hv_TmpCtrl_Row1 = new HTuple();
      HTuple hv_TmpCtrl_Col1 = new HTuple(), hv_TmpCtrl_Row2 = new HTuple();
      HTuple hv_TmpCtrl_Col2 = new HTuple(), hv_TmpCtrl_MatrixTranslation = new HTuple();
      HTuple hv_TmpCtrl_MatrixComposite = new HTuple(), hv_TmpCtrl_ResultHandle_OCR_01_0 = new HTuple();
      HTuple   hv_OcrHandle_COPY_INP_TMP = new HTuple(hv_OcrHandle);
      HTuple   hv_TextModel_COPY_INP_TMP = new HTuple(hv_TextModel);

      // Initialize local and output iconic variables 
      HOperatorSet.GenEmptyObj(out ho_TmpObj_Mono);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_MonoReduced_OCR_01_0);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_Domain);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainExpanded);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainTransformedRaw);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_DomainTransformed);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformed);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformedExpanded);
      HOperatorSet.GenEmptyObj(out ho_TmpObj_ImageTransformedReduced);
      HOperatorSet.GenEmptyObj(out ho_Symbols_OCR_01_0);
      hv_SymbolNames_OCR_01_0 = new HTuple();
      hv_Ocr_Split = new HTuple();
      try
      {
      //OCR 01: Code generated by OCR 01
      //OCR 01:
      //OCR 01: Prepare text model
      //OCR 01:
      if ((int)(new HTuple(hv_TextModel_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
      {
        hv_TextModel_COPY_INP_TMP.Dispose();
        HOperatorSet.CreateTextModelReader("manual", new HTuple(), out hv_TextModel_COPY_INP_TMP);
        HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_stroke_width", 
            5);
        HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_fragment_size_min", 
            5);
        HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_eliminate_border_blobs", 
            "true");
        HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_base_line_tolerance", 
            0.2);
        HOperatorSet.SetTextModelParam(hv_TextModel_COPY_INP_TMP, "manual_max_line_num", 
            2);
      }

      //OCR 01:
      //OCR 01: Load classifier
      //OCR 01:
      if ((int)(new HTuple(hv_OcrHandle_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
      {
        hv_OcrHandle_COPY_INP_TMP.Dispose();
        HOperatorSet.ReadOcrClassSvm("C:/Users/iwake/OneDrive - wake/Desktop/OCR/NumOcrTrainBlck.osc", 
            out hv_OcrHandle_COPY_INP_TMP);
      }


      //OCR 01:
      //OCR 01: Extract symbol regions (segmentation step)
      //OCR 01: Only consider first channel for color images
      ho_TmpObj_Mono.Dispose();
      HOperatorSet.AccessChannel(ho_Image, out ho_TmpObj_Mono, 1);
      ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
      HOperatorSet.ReduceDomain(ho_TmpObj_Mono, ho_ROI_OCR_01_0, out ho_TmpObj_MonoReduced_OCR_01_0
          );
      //OCR 01:
      //OCR 01: Orientation Correction (for consistent border and domain
      //OCR 01: handling, this is always applied, even with no rotation)
      //OCR 01:
      hv_TmpCtrl_MatrixIdentity.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_TmpCtrl_MatrixIdentity);
      //OCR 01: Apply transformation to image and domain
      ho_TmpObj_Domain.Dispose();
      HOperatorSet.GetDomain(ho_TmpObj_MonoReduced_OCR_01_0, out ho_TmpObj_Domain
          );
      hv_TmpCtrl_ClipRegion.Dispose();
      HOperatorSet.GetSystem("clip_region", out hv_TmpCtrl_ClipRegion);
      HOperatorSet.SetSystem("clip_region", "false");
      ho_TmpObj_DomainExpanded.Dispose();
      HOperatorSet.DilationCircle(ho_TmpObj_Domain, out ho_TmpObj_DomainExpanded, 
          25);
      ho_TmpObj_DomainTransformedRaw.Dispose();
      HOperatorSet.AffineTransRegion(ho_TmpObj_DomainExpanded, out ho_TmpObj_DomainTransformedRaw, 
          hv_TmpCtrl_MatrixIdentity, "true");
      hv_TmpCtrl_Row1.Dispose();hv_TmpCtrl_Col1.Dispose();hv_TmpCtrl_Row2.Dispose();hv_TmpCtrl_Col2.Dispose();
      HOperatorSet.SmallestRectangle1(ho_TmpObj_DomainTransformedRaw, out hv_TmpCtrl_Row1, 
          out hv_TmpCtrl_Col1, out hv_TmpCtrl_Row2, out hv_TmpCtrl_Col2);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TmpCtrl_MatrixTranslation.Dispose();
      HOperatorSet.HomMat2dTranslate(hv_TmpCtrl_MatrixIdentity, -hv_TmpCtrl_Row1, 
          -hv_TmpCtrl_Col1, out hv_TmpCtrl_MatrixTranslation);
      }
      hv_TmpCtrl_MatrixComposite.Dispose();
      HOperatorSet.HomMat2dCompose(hv_TmpCtrl_MatrixTranslation, hv_TmpCtrl_MatrixIdentity, 
          out hv_TmpCtrl_MatrixComposite);
      ho_TmpObj_DomainTransformed.Dispose();
      HOperatorSet.AffineTransRegion(ho_TmpObj_Domain, out ho_TmpObj_DomainTransformed, 
          hv_TmpCtrl_MatrixComposite, "true");
      ho_TmpObj_ImageTransformed.Dispose();
      HOperatorSet.AffineTransImage(ho_TmpObj_MonoReduced_OCR_01_0, out ho_TmpObj_ImageTransformed, 
          hv_TmpCtrl_MatrixComposite, "constant", "true");
      ho_TmpObj_DomainExpanded.Dispose();
      HOperatorSet.DilationCircle(ho_TmpObj_Domain, out ho_TmpObj_DomainExpanded, 
          25);
      ho_TmpObj_ImageTransformedExpanded.Dispose();
      HOperatorSet.ExpandDomainGray(ho_TmpObj_ImageTransformed, out ho_TmpObj_ImageTransformedExpanded, 
          25);
      ho_TmpObj_ImageTransformedReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_TmpObj_ImageTransformed, ho_TmpObj_DomainTransformed, 
          out ho_TmpObj_ImageTransformedReduced);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
      HOperatorSet.CropPart(ho_TmpObj_ImageTransformedReduced, out ho_TmpObj_MonoReduced_OCR_01_0, 
          0, 0, (hv_TmpCtrl_Col2-hv_TmpCtrl_Col1)+1, (hv_TmpCtrl_Row2-hv_TmpCtrl_Row1)+1);
      }
      HOperatorSet.SetSystem("clip_region", hv_TmpCtrl_ClipRegion);
      hv_TmpCtrl_ResultHandle_OCR_01_0.Dispose();
      HOperatorSet.FindText(ho_TmpObj_MonoReduced_OCR_01_0, hv_TextModel_COPY_INP_TMP, 
          out hv_TmpCtrl_ResultHandle_OCR_01_0);

      //OCR 01:
      //OCR 01: Read text (classification step)
      ho_Symbols_OCR_01_0.Dispose();
      HOperatorSet.GetTextObject(out ho_Symbols_OCR_01_0, hv_TmpCtrl_ResultHandle_OCR_01_0, 
          "manual_all_lines");
      //dev_display (TmpObj_MonoReduced_OCR_01_0)
      //dev_set_draw ('fill')
      //dev_set_colored (3)
      //dev_display (Symbols_OCR_01_0)
      hv_SymbolNames_OCR_01_0.Dispose();
      HOperatorSet.DoOcrMultiClassSvm(ho_Symbols_OCR_01_0, ho_TmpObj_MonoReduced_OCR_01_0, 
          hv_OcrHandle_COPY_INP_TMP, out hv_SymbolNames_OCR_01_0);
      hv_Ocr_Split.Dispose();
      ocr_split(hv_SymbolNames_OCR_01_0, out hv_Ocr_Split);
      ho_TmpObj_Mono.Dispose();
      ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
      ho_TmpObj_Domain.Dispose();
      ho_TmpObj_DomainExpanded.Dispose();
      ho_TmpObj_DomainTransformedRaw.Dispose();
      ho_TmpObj_DomainTransformed.Dispose();
      ho_TmpObj_ImageTransformed.Dispose();
      ho_TmpObj_ImageTransformedExpanded.Dispose();
      ho_TmpObj_ImageTransformedReduced.Dispose();
      ho_Symbols_OCR_01_0.Dispose();

      hv_OcrHandle_COPY_INP_TMP.Dispose();
      hv_TextModel_COPY_INP_TMP.Dispose();
      hv_TmpCtrl_MatrixIdentity.Dispose();
      hv_TmpCtrl_ClipRegion.Dispose();
      hv_TmpCtrl_Row1.Dispose();
      hv_TmpCtrl_Col1.Dispose();
      hv_TmpCtrl_Row2.Dispose();
      hv_TmpCtrl_Col2.Dispose();
      hv_TmpCtrl_MatrixTranslation.Dispose();
      hv_TmpCtrl_MatrixComposite.Dispose();
      hv_TmpCtrl_ResultHandle_OCR_01_0.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TmpObj_Mono.Dispose();
      ho_TmpObj_MonoReduced_OCR_01_0.Dispose();
      ho_TmpObj_Domain.Dispose();
      ho_TmpObj_DomainExpanded.Dispose();
      ho_TmpObj_DomainTransformedRaw.Dispose();
      ho_TmpObj_DomainTransformed.Dispose();
      ho_TmpObj_ImageTransformed.Dispose();
      ho_TmpObj_ImageTransformedExpanded.Dispose();
      ho_TmpObj_ImageTransformedReduced.Dispose();
      ho_Symbols_OCR_01_0.Dispose();

      hv_OcrHandle_COPY_INP_TMP.Dispose();
      hv_TextModel_COPY_INP_TMP.Dispose();
      hv_TmpCtrl_MatrixIdentity.Dispose();
      hv_TmpCtrl_ClipRegion.Dispose();
      hv_TmpCtrl_Row1.Dispose();
      hv_TmpCtrl_Col1.Dispose();
      hv_TmpCtrl_Row2.Dispose();
      hv_TmpCtrl_Col2.Dispose();
      hv_TmpCtrl_MatrixTranslation.Dispose();
      hv_TmpCtrl_MatrixComposite.Dispose();
      hv_TmpCtrl_ResultHandle_OCR_01_0.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_OS = new HTuple(), hv_Fonts = new HTuple();
    HTuple hv_Style = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_AvailableFonts = new HTuple(), hv_Fdx = new HTuple();
    HTuple hv_Indices = new HTuple();
    HTuple   hv_Font_COPY_INP_TMP = new HTuple(hv_Font);
    HTuple   hv_Size_COPY_INP_TMP = new HTuple(hv_Size);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure sets the text font of the current window with
      //the specified attributes.
      //
      //Input parameters:
      //WindowHandle: The graphics window for which the font will be set
      //Size: The font size. If Size=-1, the default of 16 is used.
      //Bold: If set to 'true', a bold font is used
      //Slant: If set to 'true', a slanted font is used
      //
      hv_OS.Dispose();
      HOperatorSet.GetSystem("operating_system", out hv_OS);
      if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
      {
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = 16;
      }
      if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
      {
        //Restore previous behaviour
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = ((1.13677*hv_Size_COPY_INP_TMP)).TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      else
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = hv_Size_COPY_INP_TMP.TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Courier";
        hv_Fonts[1] = "Courier 10 Pitch";
        hv_Fonts[2] = "Courier New";
        hv_Fonts[3] = "CourierNew";
        hv_Fonts[4] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Consolas";
        hv_Fonts[1] = "Menlo";
        hv_Fonts[2] = "Courier";
        hv_Fonts[3] = "Courier 10 Pitch";
        hv_Fonts[4] = "FreeMono";
        hv_Fonts[5] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Luxi Sans";
        hv_Fonts[1] = "DejaVu Sans";
        hv_Fonts[2] = "FreeSans";
        hv_Fonts[3] = "Arial";
        hv_Fonts[4] = "Liberation Sans";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Times New Roman";
        hv_Fonts[1] = "Luxi Serif";
        hv_Fonts[2] = "DejaVu Serif";
        hv_Fonts[3] = "FreeSerif";
        hv_Fonts[4] = "Utopia";
        hv_Fonts[5] = "Liberation Serif";
      }
      else
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple(hv_Font_COPY_INP_TMP);
      }
      hv_Style.Dispose();
      hv_Style = "";
      if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Bold";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Italic";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
      {
        hv_Style.Dispose();
        hv_Style = "Normal";
      }
      hv_AvailableFonts.Dispose();
      HOperatorSet.QueryFont(hv_ExpDefaultWinHandle, out hv_AvailableFonts);
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = "";
      for (hv_Fdx=0; (int)hv_Fdx<=(int)((new HTuple(hv_Fonts.TupleLength()))-1); hv_Fdx = (int)hv_Fdx + 1)
      {
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_AvailableFonts.TupleFind(
            hv_Fonts.TupleSelect(hv_Fdx));
        }
        if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(
            0))) != 0)
        {
          if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
          {
            hv_Font_COPY_INP_TMP.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(
                hv_Fdx);
            }
            break;
          }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        throw new HalconException("Wrong value of control parameter Font");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Font = (((hv_Font_COPY_INP_TMP+"-")+hv_Style)+"-")+hv_Size_COPY_INP_TMP;
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = ExpTmpLocalVar_Font;
      }
      }
      HOperatorSet.SetFont(hv_ExpDefaultWinHandle, hv_Font_COPY_INP_TMP);

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_InfoModelContours, ho_SignModelContours;
    HObject ho_Image=null, ho_SymbolRegions=null, ho_ROI_OCR_01_0=null;
    HObject ho_ObjectSelected=null, ho_InfoTransContours=null;
    HObject ho_SignTransContours=null;

    // Local control variables 

    HTuple hv_BarWidth = new HTuple(), hv_BarHeight = new HTuple();
    HTuple hv_BarCodeHandle = new HTuple(), hv_InfoModel = new HTuple();
    HTuple hv_SignModel = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_AcqHandle = new HTuple(), hv_InfoRow = new HTuple();
    HTuple hv_InfoColumn = new HTuple(), hv_InfoAngle = new HTuple();
    HTuple hv_InfoScore = new HTuple(), hv_DecodedDataStrings = new HTuple();
    HTuple hv_someitem = new HTuple(), hv_SignRow = new HTuple();
    HTuple hv_SignColumn = new HTuple(), hv_SignAngle = new HTuple();
    HTuple hv_SignScore = new HTuple(), hv_SymbolNames_OCR_01_0 = new HTuple();
    HTuple hv_Ocr_Split = new HTuple(), hv_Area = new HTuple();
    HTuple hv_IDRow = new HTuple(), hv_IDColumn = new HTuple();
    HTuple hv_IDRow1 = new HTuple(), hv_IDColumn1 = new HTuple();
    HTuple hv_IDRow2 = new HTuple(), hv_IDColumn2 = new HTuple();
    HTuple hv_IDHeight = new HTuple(), hv_IDWidth = new HTuple();
    HTuple hv_IDRatio = new HTuple(), hv_BarIndex = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_InfoHomMat2D = new HTuple(), hv_SignHomMat2D = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_InfoModelContours);
    HOperatorSet.GenEmptyObj(out ho_SignModelContours);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_SymbolRegions);
    HOperatorSet.GenEmptyObj(out ho_ROI_OCR_01_0);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_InfoTransContours);
    HOperatorSet.GenEmptyObj(out ho_SignTransContours);
    try
    {
      //***
      //** INIT
      //* INIT CONST
      hv_BarWidth.Dispose();
      hv_BarWidth = 800;
      hv_BarHeight.Dispose();
      hv_BarHeight = 100;
      //* INIT IMAGE
      //ImageFiles := []
      //ImageFiles[0] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (1).bmp'
      //ImageFiles[1] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (2).bmp'
      //ImageFiles[2] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (3).bmp'
      //ImageFiles[3] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (4).bmp'
      //ImageFiles[4] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (5).bmp'
      //ImageFiles[5] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (6).bmp'
      //ImageFiles[6] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (7).bmp'
      //ImageFiles[7] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (8).bmp'
      //ImageFiles[8] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (9).bmp'
      //ImageFiles[9] := 'C:/Users/iwake/OneDrive - wake/Desktop/Localization/Images/Inv/CaliInvV1 (10).bmp'
      //tuple_length (ImageFiles, Length)
      //* INIT BARCODE
      hv_BarCodeHandle.Dispose();
      HOperatorSet.CreateBarCodeModel(new HTuple(), new HTuple(), out hv_BarCodeHandle);
      HOperatorSet.SetBarCodeParam(hv_BarCodeHandle, "quiet_zone", "true");
      //* INIT LOC
      //* Info:
      hv_InfoModel.Dispose();
      HOperatorSet.ReadShapeModel("C:/Users/iwake/OneDrive - wake/Desktop/Localization/InvV1CaliInfo.shm", 
          out hv_InfoModel);
      ho_InfoModelContours.Dispose();
      HOperatorSet.GetShapeModelContours(out ho_InfoModelContours, hv_InfoModel, 
          1);
      //* Sign
      hv_SignModel.Dispose();
      HOperatorSet.ReadShapeModel("C:/Users/iwake/OneDrive - wake/Desktop/Localization/InvV1CaliSign.shm", 
          out hv_SignModel);
      ho_SignModelContours.Dispose();
      HOperatorSet.GetShapeModelContours(out ho_SignModelContours, hv_SignModel, 
          1);
      //***
      //** DISPLAY
      //* DISPLAY INIT
      dev_update_off();
      //dev_close_window(...);
      //dev_open_window(...);


      //***
      //** LOOP
      //Image Acquisition 01: Code generated by Image Acquisition 01
      hv_AcqHandle.Dispose();
      HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", 
          -1, "default", -1, "false", "default", "c42f90f2b7fa_Hikvision_MVCE12010GM", 
          0, -1, out hv_AcqHandle);
      while ((int)(1) != 0)
      {
        ho_Image.Dispose();
        HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
        {
        HObject ExpTmpOutVar_0;
        image_cali_map(ho_Image, out ExpTmpOutVar_0, new HTuple(), new HTuple());
        ho_Image.Dispose();
        ho_Image = ExpTmpOutVar_0;
        }

        try
        {
          //** PRE
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_InfoRow.Dispose();hv_InfoColumn.Dispose();hv_InfoAngle.Dispose();hv_InfoScore.Dispose();
          HOperatorSet.FindShapeModel(ho_Image, hv_InfoModel, (new HTuple(0)).TupleRad()
              , (new HTuple(360)).TupleRad(), 0.3, 1, 0.5, "least_squares", (new HTuple(7)).TupleConcat(
              1), 0.6, out hv_InfoRow, out hv_InfoColumn, out hv_InfoAngle, out hv_InfoScore);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.RotateImage(ho_Image, out ExpTmpOutVar_0, ((-hv_InfoAngle)).TupleDeg()
              , "constant");
          ho_Image.Dispose();
          ho_Image = ExpTmpOutVar_0;
          }
          HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
          //** RECOGNITION
          //* BARCODE
          ho_SymbolRegions.Dispose();hv_DecodedDataStrings.Dispose();hv_someitem.Dispose();
          image_get_bar(ho_Image, out ho_SymbolRegions, hv_BarCodeHandle, out hv_DecodedDataStrings, 
              out hv_someitem);
          //* LOC
          //* Info:
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_InfoRow.Dispose();hv_InfoColumn.Dispose();hv_InfoAngle.Dispose();hv_InfoScore.Dispose();
          HOperatorSet.FindShapeModel(ho_Image, hv_InfoModel, (new HTuple(0)).TupleRad()
              , (new HTuple(360)).TupleRad(), 0.3, 1, 0.5, "least_squares", (new HTuple(7)).TupleConcat(
              1), 0.7, out hv_InfoRow, out hv_InfoColumn, out hv_InfoAngle, out hv_InfoScore);
          }

          //* Sign
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_SignRow.Dispose();hv_SignColumn.Dispose();hv_SignAngle.Dispose();hv_SignScore.Dispose();
          HOperatorSet.FindShapeModel(ho_Image, hv_SignModel, (new HTuple(0)).TupleRad()
              , (new HTuple(360)).TupleRad(), 0.3, 1, 0.5, "least_squares", (new HTuple(7)).TupleConcat(
              1), 0.7, out hv_SignRow, out hv_SignColumn, out hv_SignAngle, out hv_SignScore);
          }
          //* Ocr
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_ROI_OCR_01_0.Dispose();
          HOperatorSet.GenRectangle2(out ho_ROI_OCR_01_0, hv_InfoRow+70, hv_InfoColumn-700, 
              hv_InfoAngle, 100, 30);
          }
          hv_SymbolNames_OCR_01_0.Dispose();hv_Ocr_Split.Dispose();
          region_ocr_num_svm(ho_Image, ho_ROI_OCR_01_0, new HTuple(), new HTuple(), 
              out hv_SymbolNames_OCR_01_0, out hv_Ocr_Split);
          hv_Area.Dispose();hv_IDRow.Dispose();hv_IDColumn.Dispose();
          HOperatorSet.AreaCenter(ho_ROI_OCR_01_0, out hv_Area, out hv_IDRow, out hv_IDColumn);
          hv_IDRow1.Dispose();hv_IDColumn1.Dispose();hv_IDRow2.Dispose();hv_IDColumn2.Dispose();
          HOperatorSet.SmallestRectangle1(ho_ROI_OCR_01_0, out hv_IDRow1, out hv_IDColumn1, 
              out hv_IDRow2, out hv_IDColumn2);
          hv_IDHeight.Dispose();hv_IDWidth.Dispose();hv_IDRatio.Dispose();
          HOperatorSet.HeightWidthRatio(ho_ROI_OCR_01_0, out hv_IDHeight, out hv_IDWidth, 
              out hv_IDRatio);
          //** DISPLAY
          //* DISPLAY BARCODE
          set_display_font(hv_ExpDefaultWinHandle, 14, "mono", "true", "false");
          HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
          HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "forest green");
          HOperatorSet.DispObj(ho_SymbolRegions, hv_ExpDefaultWinHandle);
          for (hv_BarIndex=1; (int)hv_BarIndex<=(int)(new HTuple(hv_DecodedDataStrings.TupleLength()
              )); hv_BarIndex = (int)hv_BarIndex + 1)
          {
            ho_ObjectSelected.Dispose();
            HOperatorSet.SelectObj(ho_SymbolRegions, out ho_ObjectSelected, hv_BarIndex);
            hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
            HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_Row-hv_BarHeight, 
                hv_Column-(0.25*hv_BarWidth));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_DecodedDataStrings.TupleSelect(
                hv_BarIndex-1));
            }
          }
          //* DISPLAY LOC
          HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
          //* Info:
          hv_InfoHomMat2D.Dispose();
          HOperatorSet.HomMat2dIdentity(out hv_InfoHomMat2D);
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.HomMat2dRotate(hv_InfoHomMat2D, hv_InfoAngle, 0, 0, out ExpTmpOutVar_0);
          hv_InfoHomMat2D.Dispose();
          hv_InfoHomMat2D = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.HomMat2dTranslate(hv_InfoHomMat2D, hv_InfoRow, hv_InfoColumn, 
              out ExpTmpOutVar_0);
          hv_InfoHomMat2D.Dispose();
          hv_InfoHomMat2D = ExpTmpOutVar_0;
          }
          ho_InfoTransContours.Dispose();
          HOperatorSet.AffineTransContourXld(ho_InfoModelContours, out ho_InfoTransContours, 
              hv_InfoHomMat2D);
          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
          HOperatorSet.DispObj(ho_InfoTransContours, hv_ExpDefaultWinHandle);
          //* Ocr
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Ocr_Split, "image", hv_IDRow1+hv_IDHeight, 
              hv_IDColumn1, "blue", new HTuple(), new HTuple());
          }
          //* Sign
          hv_SignHomMat2D.Dispose();
          HOperatorSet.HomMat2dIdentity(out hv_SignHomMat2D);
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.HomMat2dRotate(hv_SignHomMat2D, hv_SignAngle, 0, 0, out ExpTmpOutVar_0);
          hv_SignHomMat2D.Dispose();
          hv_SignHomMat2D = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.HomMat2dTranslate(hv_SignHomMat2D, hv_SignRow, hv_SignColumn, 
              out ExpTmpOutVar_0);
          hv_SignHomMat2D.Dispose();
          hv_SignHomMat2D = ExpTmpOutVar_0;
          }
          ho_SignTransContours.Dispose();
          HOperatorSet.AffineTransContourXld(ho_SignModelContours, out ho_SignTransContours, 
              hv_SignHomMat2D);
          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
          HOperatorSet.DispObj(ho_SignTransContours, hv_ExpDefaultWinHandle);
          //stop ()
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
        }

      }
      HOperatorSet.CloseFramegrabber(hv_AcqHandle);




    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_InfoModelContours.Dispose();
      ho_SignModelContours.Dispose();
      ho_Image.Dispose();
      ho_SymbolRegions.Dispose();
      ho_ROI_OCR_01_0.Dispose();
      ho_ObjectSelected.Dispose();
      ho_InfoTransContours.Dispose();
      ho_SignTransContours.Dispose();

      hv_BarWidth.Dispose();
      hv_BarHeight.Dispose();
      hv_BarCodeHandle.Dispose();
      hv_InfoModel.Dispose();
      hv_SignModel.Dispose();
      hv_WindowHandle.Dispose();
      hv_AcqHandle.Dispose();
      hv_InfoRow.Dispose();
      hv_InfoColumn.Dispose();
      hv_InfoAngle.Dispose();
      hv_InfoScore.Dispose();
      hv_DecodedDataStrings.Dispose();
      hv_someitem.Dispose();
      hv_SignRow.Dispose();
      hv_SignColumn.Dispose();
      hv_SignAngle.Dispose();
      hv_SignScore.Dispose();
      hv_SymbolNames_OCR_01_0.Dispose();
      hv_Ocr_Split.Dispose();
      hv_Area.Dispose();
      hv_IDRow.Dispose();
      hv_IDColumn.Dispose();
      hv_IDRow1.Dispose();
      hv_IDColumn1.Dispose();
      hv_IDRow2.Dispose();
      hv_IDColumn2.Dispose();
      hv_IDHeight.Dispose();
      hv_IDWidth.Dispose();
      hv_IDRatio.Dispose();
      hv_BarIndex.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_InfoHomMat2D.Dispose();
      hv_SignHomMat2D.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
    ho_InfoModelContours.Dispose();
    ho_SignModelContours.Dispose();
    ho_Image.Dispose();
    ho_SymbolRegions.Dispose();
    ho_ROI_OCR_01_0.Dispose();
    ho_ObjectSelected.Dispose();
    ho_InfoTransContours.Dispose();
    ho_SignTransContours.Dispose();

    hv_BarWidth.Dispose();
    hv_BarHeight.Dispose();
    hv_BarCodeHandle.Dispose();
    hv_InfoModel.Dispose();
    hv_SignModel.Dispose();
    hv_WindowHandle.Dispose();
    hv_AcqHandle.Dispose();
    hv_InfoRow.Dispose();
    hv_InfoColumn.Dispose();
    hv_InfoAngle.Dispose();
    hv_InfoScore.Dispose();
    hv_DecodedDataStrings.Dispose();
    hv_someitem.Dispose();
    hv_SignRow.Dispose();
    hv_SignColumn.Dispose();
    hv_SignAngle.Dispose();
    hv_SignScore.Dispose();
    hv_SymbolNames_OCR_01_0.Dispose();
    hv_Ocr_Split.Dispose();
    hv_Area.Dispose();
    hv_IDRow.Dispose();
    hv_IDColumn.Dispose();
    hv_IDRow1.Dispose();
    hv_IDColumn1.Dispose();
    hv_IDRow2.Dispose();
    hv_IDColumn2.Dispose();
    hv_IDHeight.Dispose();
    hv_IDWidth.Dispose();
    hv_IDRatio.Dispose();
    hv_BarIndex.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_InfoHomMat2D.Dispose();
    hv_SignHomMat2D.Dispose();
    hv_Exception.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

